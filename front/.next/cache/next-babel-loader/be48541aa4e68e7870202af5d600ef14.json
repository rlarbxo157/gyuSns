{"ast":null,"code":"var _jsxFileName = \"C:\\\\qwe\\\\nodebird3\\\\front\\\\components\\\\PostForm.jsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useCallback, useRef, useState, useEffect } from 'react';\nimport { Form, Input, Button } from 'antd';\nimport { ADD_POST_REQUEST, UPLOAD_IMAGES_REQUEST, REMOVE_IMAGE } from '../reducers/post';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addPost } from '../reducers/post'; // const dummy = {\n//   isLoggedIn: true,\n//   imagePaths: [],\n//   mainPosts: [{\n//     User: {\n//       id: 1,\n//       nickname: '제로초',\n//     },\n//     content: '첫 번째 게시글',\n//     img: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?udate=20180726',\n//   }],\n// };\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar PostForm = function PostForm() {\n  _s();\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      imagePaths = _useSelector.imagePaths,\n      addPostDone = _useSelector.addPostDone;\n\n  var _useState = useState(''),\n      text = _useState[0],\n      setText = _useState[1];\n\n  var imageInput = useRef();\n  var dispatch = useDispatch();\n  useEffect(function () {\n    if (addPostDone) {\n      setText('');\n    }\n  }, [addPostDone]);\n  var onClickImageUpload = useCallback(function () {\n    imageInput.current.click();\n  }, [imageInput.current]);\n  var onChangeImages = useCallback(function (e) {\n    // console.log('images', e.target.files);\n    var imageFormData = new FormData();\n    [].forEach.call(e.target.files, function (f) {\n      imageFormData.append('image', f);\n    });\n    dispatch({\n      type: UPLOAD_IMAGES_REQUEST,\n      data: imageFormData\n    });\n  }, []);\n  var onChangeText = useCallback(function (e) {\n    setText(e.target.value);\n  }, []);\n  var onSubmit = useCallback(function (e) {\n    if (!text || !text.trim()) {\n      return alert('게시글을 입력해주세요');\n    }\n\n    var formData = new FormData();\n    imagePaths.forEach(function (p) {\n      formData.append('image', p);\n    });\n    formData.append('content', text);\n    return dispatch({\n      type: ADD_POST_REQUEST,\n      data: formData\n    }); // dispatch(addPost(text));\n  }, [text, imagePaths]);\n  var onRemoveImage = useCallback(function (i) {\n    return function () {\n      dispatch({\n        type: REMOVE_IMAGE,\n        data: i\n      });\n    };\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"comment_form\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(PostForm, \"s60sv6PPs9QLeKbt9Pr887DmbO0=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = PostForm;\nexport default PostForm;\n{\n  /* <Form style={{ margin: '10px 0 20px' }} encType=\"multipart/form-data\" onFinish={onSubmit} >\r\n  <br />\r\n  <Input.TextArea value={text} onChange={onChangeText} maxLength={140} placeholder=\"\" style={{borderRadius:'20px',marginBottom:'10px'}} />\r\n  \n  <div style={{marginBottom:'10px'}}>\r\n  \n   <input type=\"file\" name=\"image\" multiple hidden ref={imageInput} onChange={onChangeImages} />\r\n   <Button onClick={onClickImageUpload} style={{position:'relative',left:'10px'}}>이미지 업로드</Button>\r\n   <Button type=\"primary\" style={{ float: 'right',position:'relative',right:'10px' }} htmlType=\"submit\">입력</Button>\r\n  </div>\r\n  <div>\r\n   {imagePaths.map((v,i) => {\r\n     return (\r\n       <div key={v} style={{ display: 'inline-block' }}>\r\n         <img src={`http://localhost:3065/${v}`} style={{ width: '200px' }} alt={v} />\r\n         <div>\r\n           <Button onClick={onRemoveImage(i)}>제거</Button>\r\n         </div>\r\n       </div>\r\n     )\r\n   })}\r\n  </div>\r\n  </Form> */\n}\n\nvar _c;\n\n$RefreshReg$(_c, \"PostForm\");","map":{"version":3,"sources":["C:/qwe/nodebird3/front/components/PostForm.jsx"],"names":["React","useCallback","useRef","useState","useEffect","Form","Input","Button","ADD_POST_REQUEST","UPLOAD_IMAGES_REQUEST","REMOVE_IMAGE","useSelector","useDispatch","addPost","PostForm","state","post","imagePaths","addPostDone","text","setText","imageInput","dispatch","onClickImageUpload","current","click","onChangeImages","e","imageFormData","FormData","forEach","call","target","files","f","append","type","data","onChangeText","value","onSubmit","trim","alert","formData","p","onRemoveImage","i"],"mappings":"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","sourcesContent":["import React, { useCallback, useRef, useState, useEffect } from 'react';\r\nimport { Form, Input, Button } from 'antd';\r\nimport { ADD_POST_REQUEST, UPLOAD_IMAGES_REQUEST, REMOVE_IMAGE } from '../reducers/post';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { addPost } from '../reducers/post'\r\n// const dummy = {\r\n//   isLoggedIn: true,\r\n//   imagePaths: [],\r\n//   mainPosts: [{\r\n//     User: {\r\n//       id: 1,\r\n//       nickname: '제로초',\r\n//     },\r\n//     content: '첫 번째 게시글',\r\n//     img: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?udate=20180726',\r\n//   }],\r\n// };\r\n\r\n\r\n\r\nconst PostForm = () => {\r\n  const { imagePaths, addPostDone } = useSelector((state) => state.post);\r\n  const [text, setText] = useState('');\r\n  const imageInput = useRef();\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    if (addPostDone) {\r\n      setText('');\r\n    }\r\n  }, [addPostDone]);\r\n\r\n\r\n  const onClickImageUpload = useCallback(() => {\r\n    imageInput.current.click();\r\n  }, [imageInput.current]);\r\n\r\n  const onChangeImages = useCallback((e) => {\r\n    // console.log('images', e.target.files);\r\n    const imageFormData = new FormData();\r\n    [].forEach.call(e.target.files, (f) => {\r\n      imageFormData.append('image', f);\r\n    });\r\n    dispatch({\r\n      type: UPLOAD_IMAGES_REQUEST,\r\n      data: imageFormData,\r\n    });\r\n  }, []);\r\n\r\n  const onChangeText = useCallback((e) => {\r\n    setText(e.target.value);\r\n  }, [])\r\n\r\n  const onSubmit = useCallback((e) => {\r\n\r\n    if (!text || !text.trim()) {\r\n      return alert('게시글을 입력해주세요');\r\n    }\r\n\r\n    const formData = new FormData();\r\n    imagePaths.forEach((p) => {\r\n      formData.append('image', p);\r\n    })\r\n    formData.append('content', text);\r\n    return dispatch({\r\n      type: ADD_POST_REQUEST,\r\n      data: formData,\r\n    })\r\n    // dispatch(addPost(text));\r\n  }, [text, imagePaths]);\r\n\r\n  const onRemoveImage = useCallback((i) => () => {\r\n    dispatch({\r\n      type: REMOVE_IMAGE,\r\n      data: i\r\n    })\r\n  }, []);\r\n\r\n\r\n  return (\r\n    <div className=\"comment_form\">\r\n\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default PostForm;\r\n\r\n\r\n{/* <Form style={{ margin: '10px 0 20px' }} encType=\"multipart/form-data\" onFinish={onSubmit} >\r\n<br />\r\n<Input.TextArea value={text} onChange={onChangeText} maxLength={140} placeholder=\"\" style={{borderRadius:'20px',marginBottom:'10px'}} />\r\n\r\n<div style={{marginBottom:'10px'}}>\r\n\r\n  <input type=\"file\" name=\"image\" multiple hidden ref={imageInput} onChange={onChangeImages} />\r\n  <Button onClick={onClickImageUpload} style={{position:'relative',left:'10px'}}>이미지 업로드</Button>\r\n  <Button type=\"primary\" style={{ float: 'right',position:'relative',right:'10px' }} htmlType=\"submit\">입력</Button>\r\n</div>\r\n<div>\r\n  {imagePaths.map((v,i) => {\r\n    return (\r\n      <div key={v} style={{ display: 'inline-block' }}>\r\n        <img src={`http://localhost:3065/${v}`} style={{ width: '200px' }} alt={v} />\r\n        <div>\r\n          <Button onClick={onRemoveImage(i)}>제거</Button>\r\n        </div>\r\n      </div>\r\n    )\r\n  })}\r\n</div>\r\n</Form> */}"]},"metadata":{},"sourceType":"module"}