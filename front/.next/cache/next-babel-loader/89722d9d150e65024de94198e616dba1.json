{"ast":null,"code":"import produce from \"immer\";\nconst initialState = {\n  mainPosts: [],\n  imagePaths: [],\n  hasMorePosts: true,\n  likePostLoading: false,\n  likePostDone: false,\n  likePostError: null,\n  unlikePostLoading: false,\n  unlikePostDone: false,\n  unlikePostError: null,\n  loadPostsLoading: false,\n  loadPostsDone: false,\n  loadPostsError: null,\n  addPostLoading: false,\n  addPostDone: false,\n  addPostError: null,\n  removePostLoading: false,\n  removePostDone: false,\n  removePostError: null,\n  addCommentLoading: false,\n  addCommentDone: false,\n  addCommentError: null,\n  uploadImagesLoading: false,\n  uploadImagesDone: false,\n  uploadImagesError: null,\n  retweetLoading: false,\n  retweetDone: false,\n  retweetError: null\n};\nexport const ADD_POST_REQUEST = \"ADD_POST_REQUEST\";\nexport const ADD_POST_SUCCESS = \"ADD_POST_SUCCESS\";\nexport const ADD_POST_FAILURE = \"ADD_POST_FAILURE\";\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMNET_SUCCESS';\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMNET_FAILURE';\nexport const ADD_POST_TO_ME = 'ADD_POST_TO_ME';\nexport const REMOVE_POST_TO_ME = 'REMOVE_POST_TO_ME';\nexport const addPost = data => ({\n  type: ADD_POST_REQUEST,\n  data\n});\nexport const addComment = data => ({\n  type: ADD_COMMENT_REQUEST,\n  data\n});\n\nconst post = (state = initialState, action) => produce(state, draft => {\n  switch (action.type) {\n    case ADD_POST_REQUEST:\n      draft.addPostLoading = true;\n      draft.addPostDone = false;\n      draft.addPostError = null;\n      break;\n\n    case ADD_POST_SUCCESS:\n      draft.addPostLoading = false;\n      draft.addPostDone = true;\n      draft.mainPosts.unshift(action.data);\n      draft.imagePaths = [];\n      break;\n\n    case ADD_POST_FAILURE:\n      draft.addPostLoading = false;\n      draft.addPostError = action.error;\n      break;\n\n    case LOAD_POSTS_REQUEST:\n      draft.loadPostsLoading = true;\n      draft.loadPostsDone = false;\n      draft.loadPostsError = null;\n      break;\n\n    case LOAD_POSTS_SUCCESS:\n      draft.loadPostsLoading = false;\n      draft.loadPostsDone = true;\n      draft.mainPosts = draft.mainPosts.concat(action.data);\n      draft.hasMorePosts = action.data.length === 10;\n      break;\n\n    case LOAD_POSTS_FAILURE:\n      draft.loadPostsLoading = false;\n      draft.loadPostsError = action.error;\n      break;\n\n    case UPLOAD_IMAGES_REQUEST:\n      draft.uploadImagesLoading = true;\n      draft.uploadImagesDone = false;\n      draft.uploadImagesError = null;\n      break;\n\n    case UPLOAD_IMAGES_SUCCESS:\n      {\n        draft.imagePaths = action.data;\n        draft.uploadImagesLoading = false;\n        draft.uploadImagesDone = true;\n        break;\n      }\n\n    case UPLOAD_IMAGES_FAILURE:\n      draft.uploadImagesLoading = false;\n      draft.uploadImagesError = action.error;\n      break;\n\n    case ADD_COMMENT_REQUEST:\n      draft.addCommentLoading = true;\n      draft.addCommentDone = false;\n      draft.addCommentError = null;\n      break;\n\n    case ADD_COMMENT_SUCCESS:\n      {\n        const post = draft.mainPosts.find(v => v.id === action.data.PostId);\n        post.Comments.unshift(action.data);\n        draft.addCommentLoading = false;\n        draft.addCommentDone = true;\n        break;\n      }\n\n    default:\n      break;\n  }\n});\n\nexport default post;","map":{"version":3,"sources":["C:/Users/rlarb/Documents/nodebird/front/reducers/post.jsx"],"names":["produce","initialState","mainPosts","imagePaths","hasMorePosts","likePostLoading","likePostDone","likePostError","unlikePostLoading","unlikePostDone","unlikePostError","loadPostsLoading","loadPostsDone","loadPostsError","addPostLoading","addPostDone","addPostError","removePostLoading","removePostDone","removePostError","addCommentLoading","addCommentDone","addCommentError","uploadImagesLoading","uploadImagesDone","uploadImagesError","retweetLoading","retweetDone","retweetError","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_COMMENT_REQUEST","ADD_COMMENT_SUCCESS","ADD_COMMENT_FAILURE","ADD_POST_TO_ME","REMOVE_POST_TO_ME","addPost","data","type","addComment","post","state","action","draft","unshift","error","concat","length","find","v","id","PostId","Comments"],"mappings":"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","sourcesContent":["import produce from \"immer\";\r\n\r\nconst initialState = {\r\n    mainPosts: [],\r\n    imagePaths: [],\r\n    hasMorePosts: true,\r\n    likePostLoading: false,\r\n    likePostDone: false,\r\n    likePostError: null,\r\n    unlikePostLoading: false,\r\n    unlikePostDone: false,\r\n    unlikePostError: null,\r\n    loadPostsLoading: false,\r\n    loadPostsDone: false,\r\n    loadPostsError: null,\r\n    addPostLoading: false,\r\n    addPostDone: false,\r\n    addPostError: null,\r\n    removePostLoading: false,\r\n    removePostDone: false,\r\n    removePostError: null,\r\n    addCommentLoading: false,\r\n    addCommentDone: false,\r\n    addCommentError: null,\r\n    uploadImagesLoading: false,\r\n    uploadImagesDone: false,\r\n    uploadImagesError: null,\r\n    retweetLoading: false,\r\n    retweetDone: false,\r\n    retweetError: null,\r\n}\r\n\r\nexport const ADD_POST_REQUEST =\"ADD_POST_REQUEST\"\r\nexport const ADD_POST_SUCCESS =\"ADD_POST_SUCCESS\"\r\nexport const ADD_POST_FAILURE =\"ADD_POST_FAILURE\"\r\n\r\nexport const UPLOAD_IMAGES_REQUEST = 'UPLOAD_IMAGES_REQUEST';\r\nexport const UPLOAD_IMAGES_SUCCESS = 'UPLOAD_IMAGES_SUCCESS';\r\nexport const UPLOAD_IMAGES_FAILURE = 'UPLOAD_IMAGES_FAILURE';\r\n\r\nexport const LOAD_POSTS_REQUEST = 'LOAD_POSTS_REQUEST';\r\nexport const LOAD_POSTS_SUCCESS = 'LOAD_POSTS_SUCCESS';\r\nexport const LOAD_POSTS_FAILURE = 'LOAD_POSTS_FAILURE';\r\n\r\nexport const ADD_COMMENT_REQUEST = 'ADD_COMMENT_REQUEST';\r\nexport const ADD_COMMENT_SUCCESS = 'ADD_COMMNET_SUCCESS';\r\nexport const ADD_COMMENT_FAILURE = 'ADD_COMMNET_FAILURE';\r\n\r\n\r\nexport const ADD_POST_TO_ME = 'ADD_POST_TO_ME';\r\nexport const REMOVE_POST_TO_ME ='REMOVE_POST_TO_ME';\r\n\r\nexport const addPost = (data)=> ({ \r\n    type:ADD_POST_REQUEST,\r\n    data\r\n})\r\n\r\nexport const addComment = (data)=>({\r\n    type:ADD_COMMENT_REQUEST,\r\n    data\r\n})\r\n\r\nconst post = (state=initialState,action)=> produce(state,(draft)=> {\r\n    switch(action.type){\r\n        case ADD_POST_REQUEST:\r\n            draft.addPostLoading = true;\r\n            draft.addPostDone = false;\r\n            draft.addPostError = null;\r\n            break;\r\n        case ADD_POST_SUCCESS:\r\n            draft.addPostLoading = false;\r\n            draft.addPostDone = true;\r\n            draft.mainPosts.unshift(action.data);\r\n            draft.imagePaths = [];\r\n            break;\r\n        case ADD_POST_FAILURE:\r\n            draft.addPostLoading = false;\r\n            draft.addPostError = action.error;\r\n            break;\r\n\r\n        case LOAD_POSTS_REQUEST:\r\n            draft.loadPostsLoading = true;\r\n            draft.loadPostsDone = false;\r\n            draft.loadPostsError = null;\r\n            break;\r\n        case LOAD_POSTS_SUCCESS:\r\n            draft.loadPostsLoading = false;\r\n            draft.loadPostsDone = true;\r\n            draft.mainPosts = draft.mainPosts.concat(action.data);\r\n            draft.hasMorePosts = action.data.length === 10;\r\n        break;\r\n            case LOAD_POSTS_FAILURE:\r\n            draft.loadPostsLoading = false;\r\n            draft.loadPostsError = action.error;\r\n            break; \r\n\r\n        case UPLOAD_IMAGES_REQUEST:\r\n            draft.uploadImagesLoading = true;\r\n            draft.uploadImagesDone = false;\r\n            draft.uploadImagesError = null;\r\n            break;\r\n        case UPLOAD_IMAGES_SUCCESS: {\r\n            draft.imagePaths = action.data;\r\n            draft.uploadImagesLoading = false;\r\n            draft.uploadImagesDone = true;\r\n            break;\r\n            }\r\n        case UPLOAD_IMAGES_FAILURE:\r\n            draft.uploadImagesLoading = false;\r\n            draft.uploadImagesError = action.error;\r\n            break;\r\n        case ADD_COMMENT_REQUEST:\r\n            draft.addCommentLoading = true;\r\n            draft.addCommentDone = false;\r\n            draft.addCommentError = null;\r\n            break;\r\n        case ADD_COMMENT_SUCCESS: {\r\n            const post = draft.mainPosts.find((v) => v.id === action.data.PostId);\r\n            post.Comments.unshift(action.data);\r\n            draft.addCommentLoading = false;\r\n            draft.addCommentDone = true;\r\n            break;\r\n        }\r\n        default:\r\n            break;\r\n    }\r\n})\r\n\r\nexport default post;"]},"metadata":{},"sourceType":"module"}