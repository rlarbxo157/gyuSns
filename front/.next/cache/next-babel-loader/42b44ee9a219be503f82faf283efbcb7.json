{"ast":null,"code":"var _jsxFileName = \"C:\\\\qwe\\\\nodebird3\\\\front\\\\components\\\\PostCard.jsx\";\nimport React, { useState, useCallback } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Card, Button, Avatar, Popover, List, Comment } from 'antd';\nimport PropTypes from 'prop-types';\nimport { RetweetOutlined, HeartTwoTone, HeartOutlined, MessageOutlined, EllipsisOutlined } from '@ant-design/icons';\nimport styled from 'styled-components';\nimport Link from 'next/link';\nimport moment from 'moment';\nimport CommentForm from './CommentForm';\nimport PostCardContent from './PostCardContent';\nimport PostImages from './PostImages';\nimport FollowButton from './FollowButton';\nimport { useDispatch } from 'react-redux';\nimport { LIKE_POST_REQUEST, UNLIKE_POST_REQUEST, REMOVE_POST_REQUEST } from '../reducers/post';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nmoment.locale('ko');\nconst CardWrapper = styled.div.withConfig({\n  displayName: \"PostCard__CardWrapper\",\n  componentId: \"sc-x69jxj-0\"\n})([\"margin-bottom:20px;\"]);\n\nconst PostCard = ({\n  post\n}) => {\n  const dispatch = useDispatch();\n  const {\n    0: commentFormOpened,\n    1: setCommentFormOpened\n  } = useState(false); // const [liked, setLiked] = useState(false);\n\n  const id = useSelector(state => {\n    var _state$user$me;\n\n    return (_state$user$me = state.user.me) === null || _state$user$me === void 0 ? void 0 : _state$user$me.id;\n  });\n  const onToggleComment = useCallback(() => {\n    setCommentFormOpened(prev => !prev);\n  }, []);\n  const onLike = useCallback(() => {\n    // console.log(post.id);\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: LIKE_POST_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  const onUnlike = useCallback(() => {\n    if (!id) {\n      return alert('로그인이 필요합니다');\n    }\n\n    return dispatch({\n      type: UNLIKE_POST_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  const onRemovePost = useCallback(() => {\n    if (!id) {\n      return alert('로그인이 필요합니다');\n    }\n\n    return dispatch({\n      type: REMOVE_POST_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  const liked = post.Likers.find(v => v.id === id); // console.log(post);\n\n  return /*#__PURE__*/_jsxDEV(CardWrapper, {\n    children: [/*#__PURE__*/_jsxDEV(Card, {\n      style: {\n        borderRadius: '20px'\n      },\n      cover: post.Images[0] && /*#__PURE__*/_jsxDEV(PostImages, {\n        images: post.Images\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 34\n      }, this),\n      actions: [/*#__PURE__*/_jsxDEV(RetweetOutlined, {}, \"retweet\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 11\n      }, this), liked ? /*#__PURE__*/_jsxDEV(HeartTwoTone, {\n        twoToneColor: \"#eb2f96\",\n        onClick: onUnlike\n      }, \"heart\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 15\n      }, this) : /*#__PURE__*/_jsxDEV(HeartOutlined, {\n        onClick: onLike\n      }, \"heart\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 76,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(MessageOutlined, {\n        onClick: onToggleComment\n      }, \"message\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 77,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Popover, {\n        content: /*#__PURE__*/_jsxDEV(Button.Group, {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            children: \"\\uC2E0\\uACE0\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 82,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            children: \"\\uC218\\uC815\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 83,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: onRemovePost,\n            danger: true,\n            children: \"\\uC0AD\\uC81C\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 84,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 15\n        }, this),\n        children: /*#__PURE__*/_jsxDEV(EllipsisOutlined, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 13\n        }, this)\n      }, \"ellipsis\", false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 11\n      }, this)],\n      extra: /*#__PURE__*/_jsxDEV(FollowButton, {\n        post: post\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 91,\n        columnNumber: 16\n      }, this),\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        style: {\n          float: 'right'\n        },\n        children: moment(post.createdAt).format('YYYY.MM.DD.')\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Card.Meta, {\n        avatar: /*#__PURE__*/_jsxDEV(Avatar, {\n          children: post.User.nickname[0]\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 19\n        }, this),\n        title: post.User.nickname,\n        description: /*#__PURE__*/_jsxDEV(PostCardContent, {\n          postData: post.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 24\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 69,\n      columnNumber: 7\n    }, this), commentFormOpened && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(CommentForm, {\n        post: post\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(List, {\n        header: `${post.Comments.length} 댓글`,\n        itemLayout: \"horizontal\",\n        dataSource: post.Comments,\n        renderItem: item => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: /*#__PURE__*/_jsxDEV(Comment, {\n            author: item.User.nickname,\n            avatar: /*#__PURE__*/_jsxDEV(Link, {\n              href: {\n                pathname: '/user',\n                query: {\n                  id: item.User.id\n                }\n              },\n              as: `/user/${item.User.id}`,\n              children: /*#__PURE__*/_jsxDEV(\"a\", {\n                children: /*#__PURE__*/_jsxDEV(Avatar, {\n                  children: item.User.nickname[0]\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 113,\n                  columnNumber: 26\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 113,\n                columnNumber: 23\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 112,\n              columnNumber: 21\n            }, this),\n            content: item.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 109,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true)]\n  }, post.id, true, {\n    fileName: _jsxFileName,\n    lineNumber: 68,\n    columnNumber: 5\n  }, this);\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    id: PropTypes.number,\n    User: PropTypes.object,\n    content: PropTypes.string,\n    Images: PropTypes.arrayOf(PropTypes.shape({\n      src: PropTypes.string\n    })),\n    createdAt: PropTypes.object\n  })\n};\nexport default PostCard;","map":{"version":3,"sources":["C:/qwe/nodebird3/front/components/PostCard.jsx"],"names":["React","useState","useCallback","useSelector","Card","Button","Avatar","Popover","List","Comment","PropTypes","RetweetOutlined","HeartTwoTone","HeartOutlined","MessageOutlined","EllipsisOutlined","styled","Link","moment","CommentForm","PostCardContent","PostImages","FollowButton","useDispatch","LIKE_POST_REQUEST","UNLIKE_POST_REQUEST","REMOVE_POST_REQUEST","locale","CardWrapper","div","PostCard","post","dispatch","commentFormOpened","setCommentFormOpened","id","state","user","me","onToggleComment","prev","onLike","alert","type","data","onUnlike","onRemovePost","liked","Likers","find","v","borderRadius","Images","float","createdAt","format","User","nickname","content","Comments","length","item","pathname","query","propTypes","shape","number","object","string","arrayOf","src"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Card, Button, Avatar, Popover, List, Comment } from 'antd';\r\nimport PropTypes from 'prop-types';\r\nimport { RetweetOutlined, HeartTwoTone, HeartOutlined, MessageOutlined, EllipsisOutlined } from '@ant-design/icons';\r\nimport styled from 'styled-components';\r\nimport Link from 'next/link';\r\nimport moment from 'moment';\r\n\r\nimport CommentForm from './CommentForm';\r\nimport PostCardContent from './PostCardContent';\r\nimport PostImages from './PostImages';\r\nimport FollowButton from './FollowButton';\r\nimport { useDispatch } from 'react-redux';\r\nimport { LIKE_POST_REQUEST,UNLIKE_POST_REQUEST,REMOVE_POST_REQUEST } from '../reducers/post';\r\n\r\nmoment.locale('ko');\r\n\r\nconst CardWrapper = styled.div`\r\n  margin-bottom: 20px;\r\n`;\r\n\r\nconst PostCard = ({ post }) => {\r\n  const dispatch = useDispatch();\r\n  const [commentFormOpened, setCommentFormOpened] = useState(false);\r\n  // const [liked, setLiked] = useState(false);\r\n  const id = useSelector((state) => state.user.me?.id);\r\n\r\n  const onToggleComment = useCallback(() => {\r\n    setCommentFormOpened((prev) => !prev);\r\n  }, []);\r\n\r\n  const onLike = useCallback(()=>{\r\n    // console.log(post.id);\r\n    if (!id) {\r\n      return alert('로그인이 필요합니다.');\r\n    }\r\n     return dispatch({\r\n       type:LIKE_POST_REQUEST,\r\n       data:post.id\r\n      })\r\n  },[id]);\r\n\r\n  const onUnlike = useCallback(()=> {\r\n      if(!id){\r\n        return alert('로그인이 필요합니다');\r\n      }\r\n      return dispatch({\r\n        type:UNLIKE_POST_REQUEST,\r\n        data:post.id,\r\n      })\r\n  },[id])\r\n\r\n  const onRemovePost = useCallback(()=> {\r\n\r\n    if(!id){\r\n      return alert('로그인이 필요합니다');\r\n    }\r\n    return dispatch({\r\n      type: REMOVE_POST_REQUEST,\r\n      data: post.id,\r\n    });\r\n  },[id])\r\n\r\n  const liked = post.Likers.find((v) => v.id === id);\r\n  // console.log(post);\r\n  return (\r\n    <CardWrapper key={post.id}>\r\n      <Card\r\n        style={{borderRadius:'20px'}}\r\n        cover={post.Images[0] && <PostImages images={post.Images} />}\r\n        actions={[\r\n          <RetweetOutlined key=\"retweet\" />,\r\n          liked\r\n            ? <HeartTwoTone twoToneColor=\"#eb2f96\" key=\"heart\" onClick={onUnlike} />\r\n            : <HeartOutlined key=\"heart\" onClick={onLike} />,\r\n          <MessageOutlined key=\"message\" onClick={onToggleComment} />,\r\n          <Popover\r\n            key=\"ellipsis\"\r\n            content={(\r\n              <Button.Group>\r\n                <Button>신고</Button>\r\n                <Button>수정</Button>\r\n                <Button onClick={onRemovePost} danger>삭제</Button>\r\n              </Button.Group>\r\n            )}\r\n          >\r\n            <EllipsisOutlined />\r\n          </Popover>,\r\n        ]}\r\n        extra={<FollowButton post={post} />}\r\n      >\r\n        <span style={{float:'right'}}>{moment(post.createdAt).format('YYYY.MM.DD.')}</span>\r\n        <Card.Meta\r\n          avatar={<Avatar>{post.User.nickname[0]}</Avatar>}\r\n          title={post.User.nickname}\r\n          description={<PostCardContent postData={post.content} />}\r\n        />\r\n      </Card>\r\n      {commentFormOpened && (\r\n        <>\r\n          <CommentForm post={post} />\r\n          <List\r\n            header={`${post.Comments.length} 댓글`}\r\n            itemLayout=\"horizontal\"\r\n            dataSource={post.Comments}\r\n            renderItem={(item) => (\r\n              <li>\r\n                <Comment\r\n                  author={item.User.nickname}\r\n                  avatar={(\r\n                    <Link href={{ pathname: '/user', query: { id: item.User.id } }} as={`/user/${item.User.id}`}>\r\n                      <a><Avatar>{item.User.nickname[0]}</Avatar></a>\r\n                    </Link>\r\n                  )}\r\n                  content={item.content}\r\n                />\r\n              </li>\r\n            )}\r\n          />\r\n        </>\r\n      )}\r\n    </CardWrapper>\r\n  );\r\n};\r\n\r\nPostCard.propTypes = {\r\n  post: PropTypes.shape({\r\n    id: PropTypes.number,\r\n    User: PropTypes.object,\r\n    content: PropTypes.string,\r\n    Images: PropTypes.arrayOf(PropTypes.shape({\r\n      src: PropTypes.string,\r\n    })),\r\n    createdAt: PropTypes.object,\r\n  }),\r\n};\r\n\r\nexport default PostCard;"]},"metadata":{},"sourceType":"module"}