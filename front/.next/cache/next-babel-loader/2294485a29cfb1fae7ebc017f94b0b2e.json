{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(wathchAddComment),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport axios from \"axios\";\nimport { all, call, put, takeLatest, fork } from \"redux-saga/effects\";\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE, ADD_COMMENT_REQUEST } from \"../reducers/post\";\n\nfunction addPostApi(data) {\n  return axios.post('/post', {\n    content: data\n  });\n}\n\nfunction addPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(addPostApi, action.data);\n\n        case 3:\n          result = _context.sent;\n          console.log(result.data);\n          _context.next = 7;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 7:\n          _context.next = 9;\n          return put({\n            type: ADD_POST_TO_ME,\n            data: result.data.id\n          });\n\n        case 9:\n          _context.next = 14;\n          break;\n\n        case 11:\n          _context.prev = 11;\n          _context.t0 = _context[\"catch\"](0);\n          console.log(_context.t0);\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 11]]);\n} // function uploadImagesApi(data){\n//     return axios.post('/post/')\n// }\n// function* uploadImages(action){\n//     try{\n//         const result = yield all(uploadImagesApi,action.data);\n//     }\n// }\n\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction wathchAddComment() {\n  return _regeneratorRuntime.wrap(function wathchAddComment$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n} // function* watchUploadImages(){\n//     yield takeLatest(UPLOAD_IMAGES_REQUEST,uploadImages);\n// }\n\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return all([fork(watchAddPost), fork(watchAddComment) // fork(watchUploadImages),\n          ]);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}","map":{"version":3,"sources":["C:/Users/rlarb/Documents/nodebird/front/sagas/post.jsx"],"names":["addPost","watchAddPost","wathchAddComment","postSaga","axios","all","call","put","takeLatest","fork","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","ADD_COMMENT_REQUEST","addPostApi","data","post","content","action","result","console","log","type","ADD_POST_TO_ME","id","addComment","watchAddComment"],"mappings":";;oDAaUA,O;qDA4BAC,Y;qDAIAC,gB;qDASeC,Q;;AAtDzB,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,UAAzB,EAAoCC,IAApC,QAAgD,oBAAhD;AACA,SAASC,gBAAT,EAA0BC,gBAA1B,EAA2CC,gBAA3C,EAA4DC,qBAA5D,EAAkFC,qBAAlF,EACAC,qBADA,EAEAC,mBAFA,QAE0B,kBAF1B;;AAKA,SAASC,UAAT,CAAoBC,IAApB,EAAyB;AACrB,SAAOd,KAAK,CAACe,IAAN,CAAW,OAAX,EAAmB;AACtBC,IAAAA,OAAO,EAACF;AADc,GAAnB,CAAP;AAGH;;AAED,SAAUlB,OAAV,CAAkBqB,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEuB,iBAAMf,IAAI,CAACW,UAAD,EAAYI,MAAM,CAACH,IAAnB,CAAV;;AAFvB;AAEcI,UAAAA,MAFd;AAGQC,UAAAA,OAAO,CAACC,GAAR,CAAYF,MAAM,CAACJ,IAAnB;AAHR;AAIQ,iBAAMX,GAAG,CAAC;AACNkB,YAAAA,IAAI,EAACd,gBADC;AAENO,YAAAA,IAAI,EAACI,MAAM,CAACJ;AAFN,WAAD,CAAT;;AAJR;AAAA;AAQQ,iBAAMX,GAAG,CAAC;AACNkB,YAAAA,IAAI,EAACC,cADC;AAENR,YAAAA,IAAI,EAACI,MAAM,CAACJ,IAAP,CAAYS;AAFX,WAAD,CAAT;;AARR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAaQJ,UAAAA,OAAO,CAACC,GAAR;;AAbR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAiBA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;;AAGA,SAAUvB,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMO,UAAU,CAACE,gBAAD,EAAkBV,OAAlB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUE,gBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMM,UAAU,CAACQ,mBAAD,EAAqBY,UAArB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,C,CAIA;AACA;AACA;;;AAGA,eAAe,SAAUzB,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAME,GAAG,CAAC,CACNI,IAAI,CAACR,YAAD,CADE,EAENQ,IAAI,CAACoB,eAAD,CAFE,CAGN;AAHM,WAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import axios from \"axios\";\r\nimport { all, call, put, takeLatest,fork } from \"redux-saga/effects\";\r\nimport { ADD_POST_REQUEST,ADD_POST_SUCCESS,ADD_POST_FAILURE,UPLOAD_IMAGES_REQUEST,UPLOAD_IMAGES_SUCCESS,\r\nUPLOAD_IMAGES_FAILURE, \r\nADD_COMMENT_REQUEST} from \"../reducers/post\";\r\n\r\n\r\nfunction addPostApi(data){\r\n    return axios.post('/post',{\r\n        content:data,\r\n    });\r\n}\r\n\r\nfunction* addPost(action){\r\n    try{\r\n        const result = yield call(addPostApi,action.data);\r\n        console.log(result.data);\r\n        yield put({\r\n            type:ADD_POST_SUCCESS,\r\n            data:result.data,\r\n        });\r\n        yield put({\r\n            type:ADD_POST_TO_ME,\r\n            data:result.data.id\r\n        })\r\n    }catch(error){\r\n        console.log(error);\r\n    }\r\n}\r\n\r\n// function uploadImagesApi(data){\r\n//     return axios.post('/post/')\r\n// }\r\n\r\n// function* uploadImages(action){\r\n//     try{\r\n//         const result = yield all(uploadImagesApi,action.data);\r\n//     }\r\n// }\r\n\r\n\r\nfunction* watchAddPost(){\r\n    yield takeLatest(ADD_POST_REQUEST,addPost);\r\n}\r\n\r\nfunction* wathchAddComment(){\r\n    yield takeLatest(ADD_COMMENT_REQUEST,addComment);\r\n}\r\n\r\n// function* watchUploadImages(){\r\n//     yield takeLatest(UPLOAD_IMAGES_REQUEST,uploadImages);\r\n// }\r\n\r\n\r\nexport default function* postSaga(){\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchAddComment),\r\n        // fork(watchUploadImages),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}