{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(addComment),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(loadPosts),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked5 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddComment),\n    _marked6 = /*#__PURE__*/_regeneratorRuntime.mark(watchLoadPosts),\n    _marked7 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport axios from \"axios\";\nimport { all, call, put, takeLatest, fork, throttle } from \"redux-saga/effects\";\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE, ADD_COMMENT_REQUEST, LOAD_POSTS_REQUEST, LOAD_POSTS_SUCCESS, LOAD_POSTS_FAILURE, ADD_POST_TO_ME } from \"../reducers/post\";\n\nfunction addPostApi(data) {\n  return axios.post('/post', {\n    content: data\n  });\n}\n\nfunction addPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(addPostApi, action.data);\n\n        case 3:\n          result = _context.sent;\n          console.log(result.data);\n          _context.next = 7;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 7:\n          _context.next = 9;\n          return put({\n            type: ADD_POST_TO_ME,\n            data: result.data.id\n          });\n\n        case 9:\n          _context.next = 14;\n          break;\n\n        case 11:\n          _context.prev = 11;\n          _context.t0 = _context[\"catch\"](0);\n          console.log(_context.t0);\n\n        case 14:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 11]]);\n} // function uploadImagesApi(data){\n//     return axios.post('/post/')\n// }\n// function* uploadImages(action){\n//     try{\n//         const result = yield all(uploadImagesApi,action.data);\n//     }\n// }\n\n\nfunction addCommentApi(data) {\n  return axios.post(\"/post/\".concat(data.postId, \"/comment\"), data); // POST /post/1/comment\n}\n\nfunction addComment(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addComment$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.prev = 0;\n          _context2.next = 3;\n          return call(addCommentApi, action.data);\n\n        case 3:\n          result = _context2.sent;\n          _context2.next = 6;\n          return put({\n            type: ADD_COMMENT_REQUEST,\n            data: result.data\n          });\n\n        case 6:\n          _context2.next = 11;\n          break;\n\n        case 8:\n          _context2.prev = 8;\n          _context2.t0 = _context2[\"catch\"](0);\n          console.error(_context2.t0);\n\n        case 11:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2, null, [[0, 8]]);\n}\n\nfunction loadPostsApi(data) {\n  return axios.get(\"/posts\", data);\n}\n\nfunction loadPosts(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function loadPosts$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          _context3.next = 3;\n          return call(loadPostsApi, action.lastId);\n\n        case 3:\n          result = _context3.sent;\n          _context3.next = 6;\n          return put({\n            type: LOAD_POSTS_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context3.next = 13;\n          break;\n\n        case 8:\n          _context3.prev = 8;\n          _context3.t0 = _context3[\"catch\"](0);\n          console.error(_context3.t0);\n          _context3.next = 13;\n          return put({\n            type: LOAD_POSTS_FAILURE,\n            error: _context3.t0.response.data\n          });\n\n        case 13:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3, null, [[0, 8]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}\n\nfunction watchAddComment() {\n  return _regeneratorRuntime.wrap(function watchAddComment$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return takeLatest(ADD_COMMENT_REQUEST, addComment);\n\n        case 2:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, _marked5);\n}\n\nfunction watchLoadPosts() {\n  return _regeneratorRuntime.wrap(function watchLoadPosts$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return throttle(5000, LOAD_POSTS_REQUEST, loadPosts);\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, _marked6);\n} // function* watchUploadImages(){\n//     yield takeLatest(UPLOAD_IMAGES_REQUEST,uploadImages);\n// }\n\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return all([fork(watchAddPost), fork(watchAddComment), fork(watchLoadPosts) // fork(watchUploadImages),\n          ]);\n\n        case 2:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, _marked7);\n}","map":{"version":3,"sources":["C:/Users/rlarb/Documents/nodebird/front/sagas/post.jsx"],"names":["addPost","addComment","loadPosts","watchAddPost","watchAddComment","watchLoadPosts","postSaga","axios","all","call","put","takeLatest","fork","throttle","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","ADD_COMMENT_REQUEST","LOAD_POSTS_REQUEST","LOAD_POSTS_SUCCESS","LOAD_POSTS_FAILURE","ADD_POST_TO_ME","addPostApi","data","post","content","action","result","console","log","type","id","addCommentApi","postId","error","loadPostsApi","get","lastId","response"],"mappings":"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","sourcesContent":["import axios from \"axios\";\r\nimport { all, call, put, takeLatest,fork, throttle } from \"redux-saga/effects\";\r\nimport { ADD_POST_REQUEST,ADD_POST_SUCCESS,ADD_POST_FAILURE,UPLOAD_IMAGES_REQUEST,UPLOAD_IMAGES_SUCCESS,\r\nUPLOAD_IMAGES_FAILURE, \r\nADD_COMMENT_REQUEST,\r\nLOAD_POSTS_REQUEST,\r\nLOAD_POSTS_SUCCESS,LOAD_POSTS_FAILURE,ADD_POST_TO_ME} from \"../reducers/post\";\r\n\r\n\r\nfunction addPostApi(data){\r\n    return axios.post('/post',{\r\n        content:data,\r\n    });\r\n}\r\n\r\nfunction* addPost(action){\r\n    try{\r\n        const result = yield call(addPostApi,action.data);\r\n        console.log(result.data);\r\n        yield put({\r\n            type:ADD_POST_SUCCESS,\r\n            data:result.data,\r\n        });\r\n        yield put({\r\n            type:ADD_POST_TO_ME,\r\n            data:result.data.id\r\n        })\r\n    }catch(error){\r\n        console.log(error);\r\n    }\r\n}\r\n\r\n// function uploadImagesApi(data){\r\n//     return axios.post('/post/')\r\n// }\r\n\r\n// function* uploadImages(action){\r\n//     try{\r\n//         const result = yield all(uploadImagesApi,action.data);\r\n//     }\r\n// }\r\n\r\nfunction addCommentApi(data){\r\n    return axios.post(`/post/${data.postId}/comment`, data); // POST /post/1/comment\r\n}\r\n\r\nfunction* addComment(action){\r\n    try{\r\n        const result = yield call(addCommentApi,action.data);\r\n        yield put({\r\n            type:ADD_COMMENT_REQUEST,\r\n            data:result.data\r\n        })\r\n    }catch(err){\r\n        console.error(err);\r\n    }\r\n}\r\n\r\nfunction loadPostsApi(data){\r\n    return axios.get(`/posts`,data);\r\n}\r\n\r\nfunction* loadPosts(action){\r\n    try{\r\n        const result = yield call(loadPostsApi,action.lastId);\r\n        yield put({\r\n            type:LOAD_POSTS_SUCCESS,\r\n            data:result.data,\r\n        });\r\n    }catch(error){\r\n        console.error(error);\r\n        yield put({\r\n            type: LOAD_POSTS_FAILURE,\r\n            error: error.response.data,\r\n        });\r\n    }\r\n}\r\n\r\nfunction* watchAddPost(){\r\n    yield takeLatest(ADD_POST_REQUEST,addPost);\r\n}\r\n\r\nfunction* watchAddComment(){\r\n    yield takeLatest(ADD_COMMENT_REQUEST,addComment);\r\n}\r\nfunction* watchLoadPosts(){\r\n    yield throttle(5000,LOAD_POSTS_REQUEST,loadPosts);\r\n}\r\n\r\n// function* watchUploadImages(){\r\n//     yield takeLatest(UPLOAD_IMAGES_REQUEST,uploadImages);\r\n// }\r\n\r\n\r\nexport default function* postSaga(){\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchAddComment),\r\n        fork(watchLoadPosts),\r\n        // fork(watchUploadImages),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}