{"ast":null,"code":"var _jsxFileName = \"C:\\\\qwe\\\\nodebird3\\\\front\\\\pages\\\\LandingPage.jsx\";\nimport React, { useEffect, useCallback, useState, useRef } from \"react\";\nimport AppLayout from \"../components/AppLayout\";\nimport PostForm from \"../components/PostForm\";\nimport PostCard from \"../components/PostCard\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { LOAD_MY_INFO_REQUEST } from \"../reducers/user\";\nimport { LOAD_POSTS_REQUEST } from \"../reducers/post\";\nimport wrapper from \"../store/configureStore\";\nimport { END } from \"redux-saga\";\nimport { Form, Input, Button } from \"antd\";\nimport PostCreatedForm from \"../components/PostCreatedForm\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst LandingPage = () => {\n  const {\n    mainPosts,\n    hasMorePosts,\n    loadPostsLoading\n  } = useSelector(state => state.post);\n  const {\n    0: show,\n    1: setShow\n  } = useState(false);\n  const {\n    imagePaths,\n    addPostDone\n  } = useSelector(state => state.post);\n  const {\n    0: text,\n    1: setText\n  } = useState(\"\");\n  const imageInput = useRef();\n  const dispatch = useDispatch();\n  const {\n    me\n  } = useSelector(state => state.user);\n  useEffect(() => {\n    if (addPostDone) {\n      setText(\"\");\n    }\n  }, [addPostDone]);\n  const onClickImageUpload = useCallback(() => {\n    imageInput.current.click();\n  }, [imageInput.current]);\n  const onChangeImages = useCallback(e => {\n    // console.log('images', e.target.files);\n    const imageFormData = new FormData();\n    [].forEach.call(e.target.files, f => {\n      imageFormData.append(\"image\", f);\n    });\n    dispatch({\n      type: UPLOAD_IMAGES_REQUEST,\n      data: imageFormData\n    });\n  }, []);\n  const onChangeText = useCallback(e => {\n    setText(e.target.value);\n  }, []);\n  const onSubmit = useCallback(e => {\n    if (!text || !text.trim()) {\n      return alert(\"게시글을 입력해주세요\");\n    }\n\n    const formData = new FormData();\n    imagePaths.forEach(p => {\n      formData.append(\"image\", p);\n    });\n    formData.append(\"content\", text);\n    return dispatch({\n      type: ADD_POST_REQUEST,\n      data: formData\n    });\n  }, [text, imagePaths]);\n  const onRemoveImage = useCallback(i => () => {\n    dispatch({\n      type: REMOVE_IMAGE,\n      data: i\n    });\n  }, []);\n  useEffect(() => {\n    function onScroll() {\n      if (window.pageYOffset + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n        if (hasMorePosts && !loadPostsLoading) {\n          var _mainPosts;\n\n          const lastId = (_mainPosts = mainPosts[mainPosts.length - 1]) === null || _mainPosts === void 0 ? void 0 : _mainPosts.id;\n          dispatch({\n            type: LOAD_POSTS_REQUEST,\n            lastId\n          });\n        }\n      }\n    }\n\n    window.addEventListener(\"scroll\", onScroll);\n    return () => {\n      window.removeEventListener(\"scroll\", onScroll);\n    };\n  }, [hasMorePosts, loadPostsLoading, mainPosts]);\n\n  const onShow = () => {\n    setShow(prev => !prev);\n  };\n\n  return /*#__PURE__*/_jsxDEV(AppLayout, {\n    show: show,\n    children: [/*#__PURE__*/_jsxDEV(PostForm, {\n      onShow: onShow\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 104,\n      columnNumber: 7\n    }, this), show ? /*#__PURE__*/_jsxDEV(PostCreatedForm, {\n      onShow: onShow\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 105,\n      columnNumber: 15\n    }, this) : null, /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: \"relative\",\n        top: \"30px\"\n      },\n      children: mainPosts.map(post => /*#__PURE__*/_jsxDEV(PostCard, {\n        post: post\n      }, post.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 103,\n    columnNumber: 5\n  }, this);\n};\n\nexport const getServerSideProps = wrapper.getServerSideProps(store => async ({\n  req,\n  res\n}) => {\n  // console.log(req.headers);\n  const cookie = req ? req.headers.cookie : \"\";\n  axios.defaults.headers.Cookie = \"\";\n\n  if (req && cookie) {\n    axios.defaults.headers.Cookie = cookie;\n  }\n\n  store.dispatch({\n    type: LOAD_MY_INFO_REQUEST\n  });\n  store.dispatch({\n    type: LOAD_POSTS_REQUEST\n  });\n  store.dispatch(END);\n  await store.sagaTask.toPromise();\n});\nexport default LandingPage;","map":{"version":3,"sources":["C:/qwe/nodebird3/front/pages/LandingPage.jsx"],"names":["React","useEffect","useCallback","useState","useRef","AppLayout","PostForm","PostCard","useDispatch","useSelector","LOAD_MY_INFO_REQUEST","LOAD_POSTS_REQUEST","wrapper","END","Form","Input","Button","PostCreatedForm","LandingPage","mainPosts","hasMorePosts","loadPostsLoading","state","post","show","setShow","imagePaths","addPostDone","text","setText","imageInput","dispatch","me","user","onClickImageUpload","current","click","onChangeImages","e","imageFormData","FormData","forEach","call","target","files","f","append","type","UPLOAD_IMAGES_REQUEST","data","onChangeText","value","onSubmit","trim","alert","formData","p","ADD_POST_REQUEST","onRemoveImage","i","REMOVE_IMAGE","onScroll","window","pageYOffset","document","documentElement","clientHeight","scrollHeight","lastId","length","id","addEventListener","removeEventListener","onShow","prev","position","top","map","getServerSideProps","store","req","res","cookie","headers","axios","defaults","Cookie","sagaTask","toPromise"],"mappings":"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","sourcesContent":["import React, { useEffect, useCallback, useState, useRef } from \"react\";\r\nimport AppLayout from \"../components/AppLayout\";\r\nimport PostForm from \"../components/PostForm\";\r\nimport PostCard from \"../components/PostCard\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport { LOAD_MY_INFO_REQUEST } from \"../reducers/user\";\r\nimport { LOAD_POSTS_REQUEST } from \"../reducers/post\";\r\nimport wrapper from \"../store/configureStore\";\r\nimport { END } from \"redux-saga\";\r\nimport { Form, Input, Button } from \"antd\";\r\nimport PostCreatedForm from \"../components/PostCreatedForm\";\r\nconst LandingPage = () => {\r\n  const { mainPosts, hasMorePosts, loadPostsLoading } = useSelector(\r\n    (state) => state.post\r\n  );\r\n  const [show, setShow] = useState(false);\r\n  const { imagePaths, addPostDone } = useSelector((state) => state.post);\r\n  const [text, setText] = useState(\"\");\r\n  const imageInput = useRef();\r\n  const dispatch = useDispatch();\r\n  const { me } = useSelector((state) => state.user);\r\n\r\n  useEffect(() => {\r\n    if (addPostDone) {\r\n      setText(\"\");\r\n    }\r\n  }, [addPostDone]);\r\n\r\n  const onClickImageUpload = useCallback(() => {\r\n    imageInput.current.click();\r\n  }, [imageInput.current]);\r\n\r\n  const onChangeImages = useCallback((e) => {\r\n    // console.log('images', e.target.files);\r\n    const imageFormData = new FormData();\r\n    [].forEach.call(e.target.files, (f) => {\r\n      imageFormData.append(\"image\", f);\r\n    });\r\n    dispatch({\r\n      type: UPLOAD_IMAGES_REQUEST,\r\n      data: imageFormData,\r\n    });\r\n  }, []);\r\n\r\n  const onChangeText = useCallback((e) => {\r\n    setText(e.target.value);\r\n  }, []);\r\n\r\n  const onSubmit = useCallback(\r\n    (e) => {\r\n      if (!text || !text.trim()) {\r\n        return alert(\"게시글을 입력해주세요\");\r\n      }\r\n\r\n      const formData = new FormData();\r\n      imagePaths.forEach((p) => {\r\n        formData.append(\"image\", p);\r\n      });\r\n      formData.append(\"content\", text);\r\n      return dispatch({\r\n        type: ADD_POST_REQUEST,\r\n        data: formData,\r\n      });\r\n    },\r\n    [text, imagePaths]\r\n  );\r\n\r\n  const onRemoveImage = useCallback(\r\n    (i) => () => {\r\n      dispatch({\r\n        type: REMOVE_IMAGE,\r\n        data: i,\r\n      });\r\n    },\r\n    []\r\n  );\r\n  useEffect(() => {\r\n    function onScroll() {\r\n      if (\r\n        window.pageYOffset + document.documentElement.clientHeight >\r\n        document.documentElement.scrollHeight - 300\r\n      ) {\r\n        if (hasMorePosts && !loadPostsLoading) {\r\n          const lastId = mainPosts[mainPosts.length - 1]?.id;\r\n          dispatch({\r\n            type: LOAD_POSTS_REQUEST,\r\n            lastId,\r\n          });\r\n        }\r\n      }\r\n    }\r\n    window.addEventListener(\"scroll\", onScroll);\r\n    return () => {\r\n      window.removeEventListener(\"scroll\", onScroll);\r\n    };\r\n  }, [hasMorePosts, loadPostsLoading, mainPosts]);\r\n\r\n  const onShow = () => {\r\n    setShow((prev) => !prev);\r\n  };\r\n\r\n  return (\r\n    <AppLayout show={show}>\r\n      <PostForm onShow={onShow} />\r\n      {show ? <PostCreatedForm onShow={onShow} /> : null}\r\n      <div style={{ position: \"relative\", top: \"30px\" }}>\r\n        {mainPosts.map((post) => (\r\n          <PostCard key={post.id} post={post} />\r\n        ))}\r\n      </div>\r\n    </AppLayout>\r\n  );\r\n};\r\n\r\nexport const getServerSideProps = wrapper.getServerSideProps(\r\n  (store) =>\r\n    async ({ req, res }) => {\r\n      // console.log(req.headers);\r\n      const cookie = req ? req.headers.cookie : \"\";\r\n      axios.defaults.headers.Cookie = \"\";\r\n      if (req && cookie) {\r\n        axios.defaults.headers.Cookie = cookie;\r\n      }\r\n      store.dispatch({\r\n        type: LOAD_MY_INFO_REQUEST,\r\n      });\r\n      store.dispatch({\r\n        type: LOAD_POSTS_REQUEST,\r\n      });\r\n      store.dispatch(END);\r\n      await store.sagaTask.toPromise();\r\n    }\r\n);\r\n\r\nexport default LandingPage;\r\n"]},"metadata":{},"sourceType":"module"}