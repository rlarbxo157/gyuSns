{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(watchUploadImages),\n    _marked4 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport axios from \"axios\";\nimport { all, call, put, takeLatest } from \"redux-saga/effects\";\nimport { ADD_POST_REQUEST, ADD_POST_SUCCESS, ADD_POST_FAILURE, UPLOAD_IMAGES_REQUEST, UPLOAD_IMAGES_SUCCESS, UPLOAD_IMAGES_FAILURE } from \"../reducers/post\";\n\nfunction addPostApi() {\n  return axios.post('/post', data);\n}\n\nfunction addPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(addPostApi, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context.next = 11;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          console.log(_context.t0);\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction uploadImagesApi(data) {\n  return axios.post('/post/');\n} // function* uploadImages(action){\n//     try{\n//         const result = yield all(uploadImagesApi,action.data);\n//     }\n// }\n\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nfunction watchUploadImages() {\n  return _regeneratorRuntime.wrap(function watchUploadImages$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return takeLatest(UPLOAD_IMAGES_REQUEST, uploadImages);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return all([fork(watchAddPost), fork(watchUploadImages)]);\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, _marked4);\n}","map":{"version":3,"sources":["C:/Users/rlarb/Documents/nodebird/front/sagas/post.jsx"],"names":["addPost","watchAddPost","watchUploadImages","postSaga","axios","all","call","put","takeLatest","ADD_POST_REQUEST","ADD_POST_SUCCESS","ADD_POST_FAILURE","UPLOAD_IMAGES_REQUEST","UPLOAD_IMAGES_SUCCESS","UPLOAD_IMAGES_FAILURE","addPostApi","post","data","action","result","type","console","log","uploadImagesApi","uploadImages","fork"],"mappings":";;oDAUUA,O;qDAuBAC,Y;qDAIAC,iB;qDAKeC,Q;;AA1CzB,OAAOC,KAAP,MAAkB,OAAlB;AACA,SAASC,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,UAAzB,QAA2C,oBAA3C;AACA,SAASC,gBAAT,EAA0BC,gBAA1B,EAA2CC,gBAA3C,EAA4DC,qBAA5D,EAAkFC,qBAAlF,EACAC,qBADA,QAC6B,kBAD7B;;AAIA,SAASC,UAAT,GAAqB;AACjB,SAAOX,KAAK,CAACY,IAAN,CAAW,OAAX,EAAmBC,IAAnB,CAAP;AACH;;AAED,SAAUjB,OAAV,CAAkBkB,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEuB,iBAAMZ,IAAI,CAACS,UAAD,EAAYG,MAAM,CAACD,IAAnB,CAAV;;AAFvB;AAEcE,UAAAA,MAFd;AAAA;AAGQ,iBAAMZ,GAAG,CAAC;AACNa,YAAAA,IAAI,EAACV,gBADC;AAENO,YAAAA,IAAI,EAACE,MAAM,CAACF;AAFN,WAAD,CAAT;;AAHR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAQQI,UAAAA,OAAO,CAACC,GAAR;;AARR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAYA,SAASC,eAAT,CAAyBN,IAAzB,EAA8B;AAC1B,SAAOb,KAAK,CAACY,IAAN,CAAW,QAAX,CAAP;AACH,C,CAED;AACA;AACA;AACA;AACA;;;AAGA,SAAUf,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMO,UAAU,CAACC,gBAAD,EAAkBT,OAAlB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIA,SAAUE,iBAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMM,UAAU,CAACI,qBAAD,EAAuBY,YAAvB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA,eAAe,SAAUrB,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAME,GAAG,CAAC,CACNoB,IAAI,CAACxB,YAAD,CADE,EAENwB,IAAI,CAACvB,iBAAD,CAFE,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import axios from \"axios\";\r\nimport { all, call, put, takeLatest } from \"redux-saga/effects\";\r\nimport { ADD_POST_REQUEST,ADD_POST_SUCCESS,ADD_POST_FAILURE,UPLOAD_IMAGES_REQUEST,UPLOAD_IMAGES_SUCCESS,\r\nUPLOAD_IMAGES_FAILURE } from \"../reducers/post\";\r\n\r\n\r\nfunction addPostApi(){\r\n    return axios.post('/post',data);\r\n}\r\n\r\nfunction* addPost(action){\r\n    try{\r\n        const result = yield call(addPostApi,action.data);\r\n        yield put({\r\n            type:ADD_POST_SUCCESS,\r\n            data:result.data,\r\n        });\r\n    }catch(error){\r\n        console.log(error);\r\n    }\r\n}\r\n\r\nfunction uploadImagesApi(data){\r\n    return axios.post('/post/')\r\n}\r\n\r\n// function* uploadImages(action){\r\n//     try{\r\n//         const result = yield all(uploadImagesApi,action.data);\r\n//     }\r\n// }\r\n\r\n\r\nfunction* watchAddPost(){\r\n    yield takeLatest(ADD_POST_REQUEST,addPost);\r\n}\r\n\r\nfunction* watchUploadImages(){\r\n    yield takeLatest(UPLOAD_IMAGES_REQUEST,uploadImages);\r\n}\r\n\r\n\r\nexport default function* postSaga(){\r\n    yield all([\r\n        fork(watchAddPost),\r\n        fork(watchUploadImages),\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}