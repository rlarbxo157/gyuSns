{"ast":null,"code":"var _jsxFileName = \"C:\\\\qwe\\\\nodebird3\\\\front\\\\pages\\\\LandingPage.jsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useCallback, useState, useRef } from 'react';\nimport AppLayout from '../components/AppLayout';\nimport PostForm from '../components/PostForm';\nimport PostCard from '../components/PostCard';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { LOAD_POSTS_REQUEST } from '../reducers/post';\nimport { Form, Input, Button } from 'antd';\nimport PostCreatedForm from '../components/PostCreatedForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nvar LandingPage = function LandingPage() {\n  _s();\n\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      mainPosts = _useSelector.mainPosts,\n      hasMorePosts = _useSelector.hasMorePosts,\n      loadPostsLoading = _useSelector.loadPostsLoading;\n\n  var _useState = useState(false),\n      show = _useState[0],\n      setShow = _useState[1];\n\n  var _useSelector2 = useSelector(function (state) {\n    return state.post;\n  }),\n      imagePaths = _useSelector2.imagePaths,\n      addPostDone = _useSelector2.addPostDone;\n\n  var _useState2 = useState(''),\n      text = _useState2[0],\n      setText = _useState2[1];\n\n  var imageInput = useRef();\n  var dispatch = useDispatch();\n\n  var _useSelector3 = useSelector(function (state) {\n    return state.user;\n  }),\n      me = _useSelector3.me;\n\n  useEffect(function () {\n    if (addPostDone) {\n      setText('');\n    }\n  }, [addPostDone]);\n  var onClickImageUpload = useCallback(function () {\n    imageInput.current.click();\n  }, [imageInput.current]);\n  var onChangeImages = useCallback(function (e) {\n    // console.log('images', e.target.files);\n    var imageFormData = new FormData();\n    [].forEach.call(e.target.files, function (f) {\n      imageFormData.append('image', f);\n    });\n    dispatch({\n      type: UPLOAD_IMAGES_REQUEST,\n      data: imageFormData\n    });\n  }, []);\n  var onChangeText = useCallback(function (e) {\n    setText(e.target.value);\n  }, []);\n  var onSubmit = useCallback(function (e) {\n    if (!text || !text.trim()) {\n      return alert('게시글을 입력해주세요');\n    }\n\n    var formData = new FormData();\n    imagePaths.forEach(function (p) {\n      formData.append('image', p);\n    });\n    formData.append('content', text);\n    return dispatch({\n      type: ADD_POST_REQUEST,\n      data: formData\n    }); // dispatch(addPost(text));\n  }, [text, imagePaths]);\n  var onRemoveImage = useCallback(function (i) {\n    return function () {\n      dispatch({\n        type: REMOVE_IMAGE,\n        data: i\n      });\n    };\n  }, []);\n  useEffect(function () {\n    function onScroll() {\n      if (window.pageYOffset + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n        if (hasMorePosts && !loadPostsLoading) {\n          var _mainPosts;\n\n          var lastId = (_mainPosts = mainPosts[mainPosts.length - 1]) === null || _mainPosts === void 0 ? void 0 : _mainPosts.id;\n          dispatch({\n            type: LOAD_POSTS_REQUEST,\n            lastId: lastId\n          });\n        }\n      }\n    }\n\n    window.addEventListener('scroll', onScroll);\n    return function () {\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [hasMorePosts, loadPostsLoading, mainPosts]);\n\n  var onShow = function onShow() {\n    setShow(function (prev) {\n      return !prev;\n    });\n    console.log(show);\n    console.log('a');\n  };\n\n  return /*#__PURE__*/_jsxDEV(AppLayout, {\n    children: [/*#__PURE__*/_jsxDEV(PostForm, {\n      onShow: onShow\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, _this), show ? /*#__PURE__*/_jsxDEV(_Fragment, {}, void 0, false) //  <Form style={{ margin: '10px 0 20px' }} encType=\"multipart/form-data\" onFinish={onSubmit} >\n    //     <br />\n    //     <Input.TextArea value={text} onChange={onChangeText} maxLength={140} placeholder=\"\" style={{borderRadius:'20px',marginBottom:'10px'}} />\n    //     <div style={{marginBottom:'10px'}}>\n    //     <input type=\"file\" name=\"image\" multiple hidden ref={imageInput} onChange={onChangeImages} />\n    //     <Button onClick={onClickImageUpload} style={{position:'relative',left:'10px'}}>이미지 업로드</Button>\n    //     <Button type=\"primary\" style={{ float: 'right',position:'relative',right:'10px' }} htmlType=\"submit\">입력</Button>\n    //     </div>\n    //     <div>\n    //     {imagePaths.map((v,i) => {\n    //         return (\n    //         <div key={v} style={{ display: 'inline-block' }}>\n    //             <img src={`http://localhost:3065/${v}`} style={{ width: '200px' }} alt={v} />\n    //             <div>\n    //             <Button onClick={onRemoveImage(i)}>제거</Button>\n    //             </div>\n    //         </div>\n    //         )\n    //     })}\n    //     </div>\n    // </Form>\n    : null, /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        position: 'relative',\n        top: '30px'\n      },\n      children: [/*#__PURE__*/_jsxDEV(PostCreatedForm, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 17\n      }, _this), mainPosts.map(function (post) {\n        return /*#__PURE__*/_jsxDEV(PostCard, {\n          post: post\n        }, post.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 132,\n          columnNumber: 21\n        }, _this);\n      })]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 129,\n      columnNumber: 13\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 99,\n    columnNumber: 9\n  }, _this);\n};\n\n_s(LandingPage, \"7fk/50sCjV9sooqFdvrceUS8OD8=\", false, function () {\n  return [useSelector, useSelector, useDispatch, useSelector];\n});\n\n_c = LandingPage;\nexport var __N_SSP = true;\nexport default LandingPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"LandingPage\");","map":{"version":3,"sources":["C:/qwe/nodebird3/front/pages/LandingPage.jsx"],"names":["React","useEffect","useCallback","useState","useRef","AppLayout","PostForm","PostCard","useDispatch","useSelector","LOAD_POSTS_REQUEST","Form","Input","Button","PostCreatedForm","LandingPage","state","post","mainPosts","hasMorePosts","loadPostsLoading","show","setShow","imagePaths","addPostDone","text","setText","imageInput","dispatch","user","me","onClickImageUpload","current","click","onChangeImages","e","imageFormData","FormData","forEach","call","target","files","f","append","type","UPLOAD_IMAGES_REQUEST","data","onChangeText","value","onSubmit","trim","alert","formData","p","ADD_POST_REQUEST","onRemoveImage","i","REMOVE_IMAGE","onScroll","window","pageYOffset","document","documentElement","clientHeight","scrollHeight","lastId","length","id","addEventListener","removeEventListener","onShow","prev","console","log","position","top","map"],"mappings":"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","sourcesContent":["import React, { useEffect, useCallback, useState,useRef } from 'react'\r\nimport AppLayout from '../components/AppLayout';\r\nimport PostForm from '../components/PostForm';\r\nimport PostCard from '../components/PostCard';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { LOAD_MY_INFO_REQUEST } from '../reducers/user';\r\nimport { LOAD_POSTS_REQUEST } from '../reducers/post';\r\nimport wrapper from '../store/configureStore';\r\nimport { END } from 'redux-saga';\r\nimport { Form, Input, Button } from 'antd';\r\nimport PostCreatedForm from '../components/PostCreatedForm';\r\nconst LandingPage = () => {\r\n    const { mainPosts, hasMorePosts, loadPostsLoading } = useSelector((state) => state.post);\r\n    const [show,setShow] = useState(false);\r\n    const { imagePaths, addPostDone } = useSelector((state) => state.post);\r\n    const [text, setText] = useState('');\r\n    const imageInput = useRef();\r\n    const dispatch = useDispatch();\r\n    const { me } = useSelector((state) => state.user);\r\n  \r\n    useEffect(() => {\r\n      if (addPostDone) {\r\n        setText('');\r\n      }\r\n    }, [addPostDone]);\r\n  \r\n  \r\n    const onClickImageUpload = useCallback(() => {\r\n      imageInput.current.click();\r\n    }, [imageInput.current]);\r\n  \r\n    const onChangeImages = useCallback((e) => {\r\n      // console.log('images', e.target.files);\r\n      const imageFormData = new FormData();\r\n      [].forEach.call(e.target.files, (f) => {\r\n        imageFormData.append('image', f);\r\n      });\r\n      dispatch({\r\n        type: UPLOAD_IMAGES_REQUEST,\r\n        data: imageFormData,\r\n      });\r\n    }, []);\r\n  \r\n    const onChangeText = useCallback((e) => {\r\n      setText(e.target.value);\r\n    }, [])\r\n  \r\n    const onSubmit = useCallback((e) => {\r\n  \r\n      if (!text || !text.trim()) {\r\n        return alert('게시글을 입력해주세요');\r\n      }\r\n  \r\n      const formData = new FormData();\r\n      imagePaths.forEach((p) => {\r\n        formData.append('image', p);\r\n      })\r\n      formData.append('content', text);\r\n      return dispatch({\r\n        type: ADD_POST_REQUEST,\r\n        data: formData,\r\n      })\r\n      // dispatch(addPost(text));\r\n    }, [text, imagePaths]);\r\n  \r\n    const onRemoveImage = useCallback((i) => () => {\r\n      dispatch({\r\n        type: REMOVE_IMAGE,\r\n        data: i\r\n      })\r\n    }, []);\r\n    useEffect(() => {\r\n        function onScroll() {\r\n            if (window.pageYOffset + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\r\n                if (hasMorePosts && !loadPostsLoading) {\r\n                    const lastId = mainPosts[mainPosts.length - 1]?.id;\r\n                    dispatch({\r\n                        type: LOAD_POSTS_REQUEST,\r\n                        lastId,\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        window.addEventListener('scroll', onScroll);\r\n        return () => {\r\n            window.removeEventListener('scroll', onScroll);\r\n        };\r\n    }, [hasMorePosts, loadPostsLoading, mainPosts]);\r\n\r\n\r\n    const onShow = () => {\r\n        setShow((prev)=>!prev);\r\n        console.log(show);\r\n        console.log('a');\r\n    }\r\n\r\n\r\n    return (\r\n        <AppLayout>\r\n            <PostForm onShow={onShow}  />\r\n            {show?\r\n            <>\r\n            </>\r\n            //  <Form style={{ margin: '10px 0 20px' }} encType=\"multipart/form-data\" onFinish={onSubmit} >\r\n            //     <br />\r\n            //     <Input.TextArea value={text} onChange={onChangeText} maxLength={140} placeholder=\"\" style={{borderRadius:'20px',marginBottom:'10px'}} />\r\n\r\n            //     <div style={{marginBottom:'10px'}}>\r\n\r\n            //     <input type=\"file\" name=\"image\" multiple hidden ref={imageInput} onChange={onChangeImages} />\r\n            //     <Button onClick={onClickImageUpload} style={{position:'relative',left:'10px'}}>이미지 업로드</Button>\r\n            //     <Button type=\"primary\" style={{ float: 'right',position:'relative',right:'10px' }} htmlType=\"submit\">입력</Button>\r\n            //     </div>\r\n            //     <div>\r\n            //     {imagePaths.map((v,i) => {\r\n            //         return (\r\n            //         <div key={v} style={{ display: 'inline-block' }}>\r\n            //             <img src={`http://localhost:3065/${v}`} style={{ width: '200px' }} alt={v} />\r\n            //             <div>\r\n            //             <Button onClick={onRemoveImage(i)}>제거</Button>\r\n            //             </div>\r\n            //         </div>\r\n            //         )\r\n            //     })}\r\n            //     </div>\r\n            // </Form>\r\n            :\r\n            null}\r\n            <div style={{ position: 'relative', top: '30px' }}>\r\n                <PostCreatedForm />\r\n                {mainPosts.map((post) =>\r\n                    <PostCard key={post.id} post={post} />\r\n                )}\r\n            </div>\r\n        </AppLayout>\r\n    )\r\n}\r\n\r\nexport const getServerSideProps = wrapper.getServerSideProps((store) => async ({ req, res }) => {\r\n    // console.log(req.headers);\r\n    const cookie = req ? req.headers.cookie : '';\r\n    axios.defaults.headers.Cookie = '';\r\n    if (req && cookie) {\r\n        axios.defaults.headers.Cookie = cookie;\r\n    }\r\n    store.dispatch({\r\n        type: LOAD_MY_INFO_REQUEST,\r\n    });\r\n    store.dispatch({\r\n        type: LOAD_POSTS_REQUEST,\r\n    });\r\n    store.dispatch(END);\r\n    await store.sagaTask.toPromise();\r\n})\r\n\r\n\r\nexport default LandingPage;"]},"metadata":{},"sourceType":"module"}