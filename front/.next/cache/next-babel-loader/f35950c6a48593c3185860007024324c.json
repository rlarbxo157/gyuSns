{"ast":null,"code":"import React, { useEffect } from 'react';\nimport PostForm from '../components/PostForm';\nimport PostCard from '../components/PostCard';\nimport AppLayout from '../components/AppLayout';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { LOAD_MY_INFO_REQUEST } from '../reducers/user';\nimport { LOAD_POSTS_REQUEST } from '../reducers/post';\nimport wrapper from '../store/configureStore';\nimport { END } from 'redux-saga';\nimport axios from 'axios'; // import store from '../store/configureStore';\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nconst Home = () => {\n  // const {isLoggedIn} = useSelector(state=>state.user);\n  const dispatch = useDispatch();\n  const {\n    me\n  } = useSelector(state => state.user);\n  const {\n    mainPosts,\n    hasMorePosts,\n    loadPostsLoading\n  } = useSelector(state => state.post);\n  useEffect(() => {\n    function onScroll() {\n      if (window.pageYOffset + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\n        if (hasMorePosts && !loadPostsLoading) {\n          var _mainPosts;\n\n          const lastId = (_mainPosts = mainPosts[mainPosts.length - 1]) === null || _mainPosts === void 0 ? void 0 : _mainPosts.id;\n          dispatch({\n            type: LOAD_POSTS_REQUEST,\n            lastId\n          });\n        }\n      }\n    }\n\n    window.addEventListener('scroll', onScroll);\n    return () => {\n      window.removeEventListener('scroll', onScroll);\n    };\n  }, [hasMorePosts, loadPostsLoading, mainPosts]);\n  return /*#__PURE__*/_jsxs(AppLayout, {\n    children: [me && /*#__PURE__*/_jsx(PostForm, {}), mainPosts.map(post => /*#__PURE__*/_jsx(PostCard, {\n      post: post\n    }, post.id))]\n  });\n};\n\nexport const getServerSideProps = wrapper.getServerSideProps(store => async ({\n  req,\n  res\n}) => {\n  // console.log(req.headers);\n  const cookie = req ? req.headers.cookie : '';\n  axios.defaults.headers.Cookie = '';\n\n  if (req && cookie) {\n    axios.defaults.headers.Cookie = cookie;\n  }\n\n  store.dispatch({\n    type: LOAD_MY_INFO_REQUEST\n  });\n  store.dispatch({\n    type: LOAD_POSTS_REQUEST\n  });\n  store.dispatch(END);\n  await store.sagaTask.toPromise();\n});\nexport default Home;","map":{"version":3,"sources":["C:/qwe/nodebird2/front/pages/index1.jsx"],"names":["React","useEffect","PostForm","PostCard","AppLayout","useDispatch","useSelector","LOAD_MY_INFO_REQUEST","LOAD_POSTS_REQUEST","wrapper","END","axios","Home","dispatch","me","state","user","mainPosts","hasMorePosts","loadPostsLoading","post","onScroll","window","pageYOffset","document","documentElement","clientHeight","scrollHeight","lastId","length","id","type","addEventListener","removeEventListener","map","getServerSideProps","store","req","res","cookie","headers","defaults","Cookie","sagaTask","toPromise"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,QAAP,MAAqB,wBAArB;AACA,OAAOC,SAAP,MAAsB,yBAAtB;AACA,SAASC,WAAT,EAAsBC,WAAtB,QAAyC,aAAzC;AACA,SAASC,oBAAT,QAAqC,kBAArC;AACA,SAASC,kBAAT,QAAmC,kBAAnC;AACA,OAAOC,OAAP,MAAoB,yBAApB;AACA,SAASC,GAAT,QAAoB,YAApB;AACA,OAAOC,KAAP,MAAkB,OAAlB,C,CACA;;;;;AAEA,MAAMC,IAAI,GAAG,MAAM;AACf;AACA,QAAMC,QAAQ,GAAGR,WAAW,EAA5B;AACA,QAAM;AAAES,IAAAA;AAAF,MAASR,WAAW,CAAES,KAAD,IAAWA,KAAK,CAACC,IAAlB,CAA1B;AACA,QAAM;AAAEC,IAAAA,SAAF;AAAaC,IAAAA,YAAb;AAA2BC,IAAAA;AAA3B,MAAgDb,WAAW,CAAES,KAAD,IAAWA,KAAK,CAACK,IAAlB,CAAjE;AAIAnB,EAAAA,SAAS,CAAC,MAAM;AACZ,aAASoB,QAAT,GAAoB;AAChB,UAAIC,MAAM,CAACC,WAAP,GAAqBC,QAAQ,CAACC,eAAT,CAAyBC,YAA9C,GAA6DF,QAAQ,CAACC,eAAT,CAAyBE,YAAzB,GAAwC,GAAzG,EAA8G;AAC1G,YAAIT,YAAY,IAAI,CAACC,gBAArB,EAAuC;AAAA;;AACnC,gBAAMS,MAAM,iBAAGX,SAAS,CAACA,SAAS,CAACY,MAAV,GAAmB,CAApB,CAAZ,+CAAG,WAAiCC,EAAhD;AACAjB,UAAAA,QAAQ,CAAC;AACLkB,YAAAA,IAAI,EAAEvB,kBADD;AAELoB,YAAAA;AAFK,WAAD,CAAR;AAIH;AACJ;AACJ;;AACDN,IAAAA,MAAM,CAACU,gBAAP,CAAwB,QAAxB,EAAkCX,QAAlC;AACA,WAAO,MAAM;AACTC,MAAAA,MAAM,CAACW,mBAAP,CAA2B,QAA3B,EAAqCZ,QAArC;AACH,KAFD;AAGH,GAhBQ,EAgBN,CAACH,YAAD,EAAeC,gBAAf,EAAiCF,SAAjC,CAhBM,CAAT;AAkBA,sBACI,MAAC,SAAD;AAAA,eACKH,EAAE,iBAAI,KAAC,QAAD,KADX,EAEKG,SAAS,CAACiB,GAAV,CAAed,IAAD,iBACX,KAAC,QAAD;AAAwB,MAAA,IAAI,EAAEA;AAA9B,OAAeA,IAAI,CAACU,EAApB,CADH,CAFL;AAAA,IADJ;AAQH,CAlCD;;AAoCA,OAAO,MAAMK,kBAAkB,GAAG1B,OAAO,CAAC0B,kBAAR,CAA4BC,KAAD,IAAW,OAAO;AAAEC,EAAAA,GAAF;AAAOC,EAAAA;AAAP,CAAP,KAAwB;AAC5F;AACA,QAAMC,MAAM,GAAGF,GAAG,GAAGA,GAAG,CAACG,OAAJ,CAAYD,MAAf,GAAwB,EAA1C;AACA5B,EAAAA,KAAK,CAAC8B,QAAN,CAAeD,OAAf,CAAuBE,MAAvB,GAAgC,EAAhC;;AACA,MAAIL,GAAG,IAAIE,MAAX,EAAmB;AACf5B,IAAAA,KAAK,CAAC8B,QAAN,CAAeD,OAAf,CAAuBE,MAAvB,GAAgCH,MAAhC;AACH;;AACDH,EAAAA,KAAK,CAACvB,QAAN,CAAe;AACXkB,IAAAA,IAAI,EAAExB;AADK,GAAf;AAGA6B,EAAAA,KAAK,CAACvB,QAAN,CAAe;AACXkB,IAAAA,IAAI,EAAEvB;AADK,GAAf;AAGA4B,EAAAA,KAAK,CAACvB,QAAN,CAAeH,GAAf;AACA,QAAM0B,KAAK,CAACO,QAAN,CAAeC,SAAf,EAAN;AACH,CAfiC,CAA3B;AAiBP,eAAehC,IAAf","sourcesContent":["import React, { useEffect } from 'react';\r\nimport PostForm from '../components/PostForm';\r\nimport PostCard from '../components/PostCard';\r\nimport AppLayout from '../components/AppLayout';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { LOAD_MY_INFO_REQUEST } from '../reducers/user';\r\nimport { LOAD_POSTS_REQUEST } from '../reducers/post';\r\nimport wrapper from '../store/configureStore';\r\nimport { END } from 'redux-saga';\r\nimport axios from 'axios';\r\n// import store from '../store/configureStore';\r\n\r\nconst Home = () => {\r\n    // const {isLoggedIn} = useSelector(state=>state.user);\r\n    const dispatch = useDispatch();\r\n    const { me } = useSelector((state) => state.user);\r\n    const { mainPosts, hasMorePosts, loadPostsLoading } = useSelector((state) => state.post);\r\n\r\n\r\n\r\n    useEffect(() => {\r\n        function onScroll() {\r\n            if (window.pageYOffset + document.documentElement.clientHeight > document.documentElement.scrollHeight - 300) {\r\n                if (hasMorePosts && !loadPostsLoading) {\r\n                    const lastId = mainPosts[mainPosts.length - 1]?.id;\r\n                    dispatch({\r\n                        type: LOAD_POSTS_REQUEST,\r\n                        lastId,\r\n                    });\r\n                }\r\n            }\r\n        }\r\n        window.addEventListener('scroll', onScroll);\r\n        return () => {\r\n            window.removeEventListener('scroll', onScroll);\r\n        };\r\n    }, [hasMorePosts, loadPostsLoading, mainPosts]);\r\n\r\n    return (\r\n        <AppLayout>\r\n            {me && <PostForm />}\r\n            {mainPosts.map((post) =>\r\n                <PostCard key={post.id} post={post} />\r\n            )}\r\n        </AppLayout>\r\n    );\r\n};\r\n\r\nexport const getServerSideProps = wrapper.getServerSideProps((store) => async ({ req, res }) => {\r\n    // console.log(req.headers);\r\n    const cookie = req ? req.headers.cookie : '';\r\n    axios.defaults.headers.Cookie = '';\r\n    if (req && cookie) {\r\n        axios.defaults.headers.Cookie = cookie;\r\n    }\r\n    store.dispatch({\r\n        type: LOAD_MY_INFO_REQUEST,\r\n    });\r\n    store.dispatch({\r\n        type: LOAD_POSTS_REQUEST,\r\n    });\r\n    store.dispatch(END);\r\n    await store.sagaTask.toPromise();\r\n})\r\n\r\nexport default Home;"]},"metadata":{},"sourceType":"module"}