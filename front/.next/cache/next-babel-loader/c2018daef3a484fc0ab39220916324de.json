{"ast":null,"code":"import React, { useCallback, useRef, useState, useEffect } from 'react';\nimport { Form, Input, Button } from 'antd';\nimport { ADD_POST_REQUEST, UPLOAD_IMAGES_REQUEST, REMOVE_IMAGE } from '../reducers/post';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { addPost } from '../reducers/post'; // const dummy = {\n//   isLoggedIn: true,\n//   imagePaths: [],\n//   mainPosts: [{\n//     User: {\n//       id: 1,\n//       nickname: '제로초',\n//     },\n//     content: '첫 번째 게시글',\n//     img: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?udate=20180726',\n//   }],\n// };\n\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\n\nvar PostForm = function PostForm() {\n  var _useSelector = useSelector(function (state) {\n    return state.post;\n  }),\n      imagePaths = _useSelector.imagePaths,\n      addPostDone = _useSelector.addPostDone;\n\n  var _useState = useState(''),\n      text = _useState[0],\n      setText = _useState[1];\n\n  var imageInput = useRef();\n  var dispatch = useDispatch();\n  useEffect(function () {\n    if (addPostDone) {\n      setText('');\n    }\n  }, [addPostDone]);\n  var onClickImageUpload = useCallback(function () {\n    imageInput.current.click();\n  }, [imageInput.current]);\n  var onChangeImages = useCallback(function (e) {\n    // console.log('images', e.target.files);\n    var imageFormData = new FormData();\n    [].forEach.call(e.target.files, function (f) {\n      imageFormData.append('image', f);\n    });\n    dispatch({\n      type: UPLOAD_IMAGES_REQUEST,\n      data: imageFormData\n    });\n  }, []);\n  var onChangeText = useCallback(function (e) {\n    setText(e.target.value);\n  }, []);\n  var onSubmit = useCallback(function (e) {\n    if (!text || !text.trim()) {\n      return alert('게시글을 입력해주세요');\n    }\n\n    var formData = new FormData();\n    imagePaths.forEach(function (p) {\n      formData.append('image', p);\n    });\n    formData.append('content', text);\n    return dispatch({\n      type: ADD_POST_REQUEST,\n      data: formData\n    }); // dispatch(addPost(text));\n  }, [text, imagePaths]);\n  var onRemoveImage = useCallback(function (i) {\n    return function () {\n      dispatch({\n        type: REMOVE_IMAGE,\n        data: i\n      });\n    };\n  }, []);\n  return /*#__PURE__*/_jsxs(Form, {\n    style: {\n      margin: '10px 0 20px'\n    },\n    encType: \"multipart/form-data\",\n    onFinish: onSubmit,\n    children: [/*#__PURE__*/_jsx(Input.TextArea, {\n      value: text,\n      onChange: onChangeText,\n      maxLength: 140,\n      placeholder: \"\"\n    }), /*#__PURE__*/_jsxs(\"div\", {\n      children: [/*#__PURE__*/_jsx(\"input\", {\n        type: \"file\",\n        name: \"image\",\n        multiple: true,\n        hidden: true,\n        ref: imageInput,\n        onChange: onChangeImages\n      }), /*#__PURE__*/_jsx(Button, {\n        onClick: onClickImageUpload,\n        children: \"\\uC774\\uBBF8\\uC9C0 \\uC5C5\\uB85C\\uB4DC\"\n      }), /*#__PURE__*/_jsx(Button, {\n        type: \"primary\",\n        style: {\n          float: 'right'\n        },\n        htmlType: \"submit\",\n        children: \"\\uC785\\uB825\"\n      })]\n    }), /*#__PURE__*/_jsx(\"div\", {\n      children: imagePaths.map(function (v, i) {\n        return /*#__PURE__*/_jsxs(\"div\", {\n          style: {\n            display: 'inline-block'\n          },\n          children: [/*#__PURE__*/_jsx(\"img\", {\n            src: \"http://localhost:3065/\".concat(v),\n            style: {\n              width: '200px'\n            },\n            alt: v\n          }), /*#__PURE__*/_jsx(\"div\", {\n            children: /*#__PURE__*/_jsx(Button, {\n              onClick: onRemoveImage(i),\n              children: \"\\uC81C\\uAC70\"\n            })\n          })]\n        }, v);\n      })\n    })]\n  });\n};\n\nexport default PostForm;","map":{"version":3,"sources":["C:/qwe/nodebird/front/components/PostForm.jsx"],"names":["React","useCallback","useRef","useState","useEffect","Form","Input","Button","ADD_POST_REQUEST","UPLOAD_IMAGES_REQUEST","REMOVE_IMAGE","useSelector","useDispatch","addPost","PostForm","state","post","imagePaths","addPostDone","text","setText","imageInput","dispatch","onClickImageUpload","current","click","onChangeImages","e","imageFormData","FormData","forEach","call","target","files","f","append","type","data","onChangeText","value","onSubmit","trim","alert","formData","p","onRemoveImage","i","margin","float","map","v","display","width"],"mappings":"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","sourcesContent":["import React, { useCallback, useRef,useState,useEffect } from 'react';\r\nimport { Form, Input, Button } from 'antd';\r\nimport { ADD_POST_REQUEST,UPLOAD_IMAGES_REQUEST,REMOVE_IMAGE } from '../reducers/post';\r\nimport { useSelector,useDispatch } from 'react-redux';\r\nimport {addPost} from '../reducers/post'\r\n// const dummy = {\r\n//   isLoggedIn: true,\r\n//   imagePaths: [],\r\n//   mainPosts: [{\r\n//     User: {\r\n//       id: 1,\r\n//       nickname: '제로초',\r\n//     },\r\n//     content: '첫 번째 게시글',\r\n//     img: 'https://bookthumb-phinf.pstatic.net/cover/137/995/13799585.jpg?udate=20180726',\r\n//   }],\r\n// };\r\n\r\n\r\n\r\nconst PostForm = () => {\r\n  const { imagePaths, addPostDone } = useSelector((state) => state.post);\r\n  const [text,setText] = useState('');\r\n  const imageInput = useRef();\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    if (addPostDone) {\r\n      setText('');\r\n    }\r\n  }, [addPostDone]);\r\n\r\n\r\n  const onClickImageUpload = useCallback(() => {\r\n    imageInput.current.click();\r\n  }, [imageInput.current]);\r\n\r\n  const onChangeImages = useCallback((e) => {\r\n    // console.log('images', e.target.files);\r\n    const imageFormData = new FormData();\r\n    [].forEach.call(e.target.files, (f) => {\r\n      imageFormData.append('image', f);\r\n    });\r\n    dispatch({\r\n      type: UPLOAD_IMAGES_REQUEST,\r\n      data: imageFormData,\r\n    });\r\n  }, []);\r\n\r\n  const onChangeText = useCallback((e)=> {\r\n     setText(e.target.value);\r\n  },[])\r\n\r\n  const onSubmit = useCallback((e)=> {\r\n\r\n    if(!text ||!text.trim()){\r\n      return alert('게시글을 입력해주세요');\r\n    }\r\n\r\n    const formData = new FormData();\r\n    imagePaths.forEach((p)=>{\r\n      formData.append('image',p);\r\n    })\r\n    formData.append('content',text);\r\n    return dispatch({\r\n      type:ADD_POST_REQUEST,\r\n      data:formData,\r\n    })\r\n      // dispatch(addPost(text));\r\n  },[text,imagePaths]);\r\n\r\n  const onRemoveImage = useCallback((i)=>()=> {\r\n      dispatch({\r\n        type:REMOVE_IMAGE,\r\n        data:i\r\n      })\r\n  },[]);\r\n\r\n\r\n  return (\r\n    <Form style={{ margin: '10px 0 20px' }} encType=\"multipart/form-data\" onFinish={onSubmit} >\r\n      <Input.TextArea value={text} onChange={onChangeText} maxLength={140} placeholder=\"\" />\r\n      <div>\r\n        <input type=\"file\" name=\"image\" multiple hidden ref={imageInput} onChange={onChangeImages} />\r\n        <Button onClick={onClickImageUpload}>이미지 업로드</Button>\r\n        <Button type=\"primary\" style={{ float: 'right' }} htmlType=\"submit\">입력</Button>\r\n      </div>\r\n      <div>\r\n        {imagePaths.map((v,i) => {\r\n          return (\r\n            <div key={v} style={{ display: 'inline-block' }}>\r\n              <img src={`http://localhost:3065/${v}`} style={{ width: '200px' }} alt={v} />\r\n              <div>\r\n                <Button onClick={onRemoveImage(i)}>제거</Button>\r\n              </div>\r\n            </div>\r\n          )\r\n        })}\r\n      </div>\r\n    </Form>\r\n  );\r\n};\r\n\r\nexport default PostForm;"]},"metadata":{},"sourceType":"module"}