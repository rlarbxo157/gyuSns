{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\rlarb\\\\Documents\\\\nodebird\\\\front\\\\components\\\\PostCard.jsx\";\nvar __jsx = React.createElement;\nimport React, { useState, useCallback } from 'react';\nimport { useSelector } from 'react-redux';\nimport { Card, Button, Avatar, Popover, List, Comment } from 'antd';\nimport PropTypes from 'prop-types';\nimport { RetweetOutlined, HeartTwoTone, HeartOutlined, MessageOutlined, EllipsisOutlined } from '@ant-design/icons';\nimport styled from 'styled-components';\nimport Link from 'next/link';\nimport CommentForm from './CommentForm';\nimport PostCardContent from './PostCardContent';\nimport PostImages from './PostImages';\nimport FollowButton from './FollowButton';\nimport { useDispatch } from 'react-redux';\nimport { LIKE_POST_REQUEST } from '../reducers/post';\nconst CardWrapper = styled.div`\n  margin-bottom: 20px;\n`;\n\nconst PostCard = ({\n  post\n}) => {\n  const dispatch = useDispatch();\n  const {\n    0: commentFormOpened,\n    1: setCommentFormOpened\n  } = useState(false); // const [liked, setLiked] = useState(false);\n\n  const id = useSelector(state => {\n    var _state$user$me;\n\n    return (_state$user$me = state.user.me) === null || _state$user$me === void 0 ? void 0 : _state$user$me.id;\n  }); // const onToggleLike = useCallback(() => {\n  //   setLiked((prev) => !prev);\n  // }, []);\n\n  const onToggleComment = useCallback(() => {\n    setCommentFormOpened(prev => !prev);\n  }, []);\n  const onLike = useCallback(() => {\n    if (!id) {\n      return alert('로그인이 필요합니다.');\n    }\n\n    return dispatch({\n      type: LIKE_POST_REQUEST,\n      data: post.id\n    });\n  }, [id]);\n  const liked = post.Likers.find(v => v.id === id);\n  console.log(post);\n  return __jsx(CardWrapper, {\n    key: post.id,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 5\n    }\n  }, __jsx(Card, {\n    cover: post.Images[0] && __jsx(PostImages, {\n      images: post.Images,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 34\n      }\n    }),\n    actions: [__jsx(RetweetOutlined, {\n      key: \"retweet\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }\n    }), liked ? __jsx(HeartTwoTone, {\n      twoToneColor: \"#eb2f96\",\n      key: \"heart\",\n      onClick: onToggleLike,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 15\n      }\n    }) : __jsx(HeartOutlined, {\n      key: \"heart\",\n      onClick: onLike,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 15\n      }\n    }), __jsx(MessageOutlined, {\n      key: \"message\",\n      onClick: onToggleComment,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 11\n      }\n    }), __jsx(Popover, {\n      key: \"ellipsis\",\n      content: __jsx(Button.Group, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 58,\n          columnNumber: 15\n        }\n      }, __jsx(Button, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 17\n        }\n      }, \"\\uC2E0\\uACE0\"), __jsx(Button, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 17\n        }\n      }, \"\\uC218\\uC815\"), __jsx(Button, {\n        danger: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 17\n        }\n      }, \"\\uC0AD\\uC81C\")),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 11\n      }\n    }, __jsx(EllipsisOutlined, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 13\n      }\n    }))],\n    extra: __jsx(FollowButton, {\n      post: post,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 68,\n        columnNumber: 16\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }\n  }, __jsx(Card.Meta, {\n    avatar: __jsx(Avatar, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71,\n        columnNumber: 19\n      }\n    }, post.User.nickname[0]),\n    title: post.User.nickname,\n    description: __jsx(PostCardContent, {\n      postData: post.content,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 24\n      }\n    }),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 9\n    }\n  })), commentFormOpened && __jsx(React.Fragment, null, __jsx(CommentForm, {\n    post: post,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 11\n    }\n  }), __jsx(List, {\n    header: `${post.Comments.length} 댓글`,\n    itemLayout: \"horizontal\",\n    dataSource: post.Comments,\n    renderItem: item => __jsx(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 15\n      }\n    }, __jsx(Comment, {\n      author: item.User.nickname,\n      avatar: __jsx(Link, {\n        href: {\n          pathname: '/user',\n          query: {\n            id: item.User.id\n          }\n        },\n        as: `/user/${item.User.id}`,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 21\n        }\n      }, __jsx(\"a\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 23\n        }\n      }, __jsx(Avatar, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 26\n        }\n      }, item.User.nickname[0]))),\n      content: item.content,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }\n    })),\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 11\n    }\n  })));\n};\n\nPostCard.propTypes = {\n  post: PropTypes.shape({\n    id: PropTypes.number,\n    User: PropTypes.object,\n    content: PropTypes.string,\n    Images: PropTypes.arrayOf(PropTypes.shape({\n      src: PropTypes.string\n    })),\n    createdAt: PropTypes.object\n  })\n};\nexport default PostCard;","map":{"version":3,"sources":["C:/Users/rlarb/Documents/nodebird/front/components/PostCard.jsx"],"names":["React","useState","useCallback","useSelector","Card","Button","Avatar","Popover","List","Comment","PropTypes","RetweetOutlined","HeartTwoTone","HeartOutlined","MessageOutlined","EllipsisOutlined","styled","Link","CommentForm","PostCardContent","PostImages","FollowButton","useDispatch","LIKE_POST_REQUEST","CardWrapper","div","PostCard","post","dispatch","commentFormOpened","setCommentFormOpened","id","state","user","me","onToggleComment","prev","onLike","alert","type","data","liked","Likers","find","v","console","log","Images","onToggleLike","User","nickname","content","Comments","length","item","pathname","query","propTypes","shape","number","object","string","arrayOf","src","createdAt"],"mappings":"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","sourcesContent":["import React, { useState, useCallback } from 'react';\r\nimport { useSelector } from 'react-redux';\r\nimport { Card, Button, Avatar, Popover, List, Comment } from 'antd';\r\nimport PropTypes from 'prop-types';\r\nimport { RetweetOutlined, HeartTwoTone, HeartOutlined, MessageOutlined, EllipsisOutlined } from '@ant-design/icons';\r\nimport styled from 'styled-components';\r\nimport Link from 'next/link';\r\n\r\nimport CommentForm from './CommentForm';\r\nimport PostCardContent from './PostCardContent';\r\nimport PostImages from './PostImages';\r\nimport FollowButton from './FollowButton';\r\nimport { useDispatch } from 'react-redux';\r\nimport { LIKE_POST_REQUEST } from '../reducers/post';\r\n\r\n\r\nconst CardWrapper = styled.div`\r\n  margin-bottom: 20px;\r\n`;\r\n\r\nconst PostCard = ({ post }) => {\r\n  const dispatch = useDispatch();\r\n  const [commentFormOpened, setCommentFormOpened] = useState(false);\r\n  // const [liked, setLiked] = useState(false);\r\n  const id = useSelector((state) => state.user.me?.id);\r\n  // const onToggleLike = useCallback(() => {\r\n  //   setLiked((prev) => !prev);\r\n  // }, []);\r\n\r\n  const onToggleComment = useCallback(() => {\r\n    setCommentFormOpened((prev) => !prev);\r\n  }, []);\r\n\r\n  const onLike = useCallback(()=>{\r\n    if (!id) {\r\n      return alert('로그인이 필요합니다.');\r\n    }\r\n     return dispatch({\r\n       type:LIKE_POST_REQUEST,\r\n       data:post.id\r\n      })\r\n  },[id]);\r\n  const liked = post.Likers.find((v) => v.id === id);\r\n  console.log(post);\r\n  return (\r\n    <CardWrapper key={post.id}>\r\n      <Card\r\n        cover={post.Images[0] && <PostImages images={post.Images} />}\r\n        actions={[\r\n          <RetweetOutlined key=\"retweet\" />,\r\n          liked\r\n            ? <HeartTwoTone twoToneColor=\"#eb2f96\" key=\"heart\" onClick={onToggleLike} />\r\n            : <HeartOutlined key=\"heart\" onClick={onLike} />,\r\n          <MessageOutlined key=\"message\" onClick={onToggleComment} />,\r\n          <Popover\r\n            key=\"ellipsis\"\r\n            content={(\r\n              <Button.Group>\r\n                <Button>신고</Button>\r\n                <Button>수정</Button>\r\n                <Button danger>삭제</Button>\r\n              </Button.Group>\r\n            )}\r\n          >\r\n            <EllipsisOutlined />\r\n          </Popover>,\r\n        ]}\r\n        extra={<FollowButton post={post} />}\r\n      >\r\n        <Card.Meta\r\n          avatar={<Avatar>{post.User.nickname[0]}</Avatar>}\r\n          title={post.User.nickname}\r\n          description={<PostCardContent postData={post.content} />}\r\n        />\r\n      </Card>\r\n      {commentFormOpened && (\r\n        <>\r\n          <CommentForm post={post} />\r\n          <List\r\n            header={`${post.Comments.length} 댓글`}\r\n            itemLayout=\"horizontal\"\r\n            dataSource={post.Comments}\r\n            renderItem={(item) => (\r\n              <li>\r\n                <Comment\r\n                  author={item.User.nickname}\r\n                  avatar={(\r\n                    <Link href={{ pathname: '/user', query: { id: item.User.id } }} as={`/user/${item.User.id}`}>\r\n                      <a><Avatar>{item.User.nickname[0]}</Avatar></a>\r\n                    </Link>\r\n                  )}\r\n                  content={item.content}\r\n                />\r\n              </li>\r\n            )}\r\n          />\r\n        </>\r\n      )}\r\n    </CardWrapper>\r\n  );\r\n};\r\n\r\nPostCard.propTypes = {\r\n  post: PropTypes.shape({\r\n    id: PropTypes.number,\r\n    User: PropTypes.object,\r\n    content: PropTypes.string,\r\n    Images: PropTypes.arrayOf(PropTypes.shape({\r\n      src: PropTypes.string,\r\n    })),\r\n    createdAt: PropTypes.object,\r\n  }),\r\n};\r\n\r\nexport default PostCard;"]},"metadata":{},"sourceType":"module"}