{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nvar _marked = /*#__PURE__*/_regeneratorRuntime.mark(addPost),\n    _marked2 = /*#__PURE__*/_regeneratorRuntime.mark(watchAddPost),\n    _marked3 = /*#__PURE__*/_regeneratorRuntime.mark(postSaga);\n\nimport { all, call, put, takeLatest } from \"redux-saga/effects\";\nimport { ADD_POST_REQUEST } from \"../reducers/post\";\n\nfunction addPost(action) {\n  var result;\n  return _regeneratorRuntime.wrap(function addPost$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          _context.next = 3;\n          return call(addPostApi, action.data);\n\n        case 3:\n          result = _context.sent;\n          _context.next = 6;\n          return put({\n            type: ADD_POST_SUCCESS,\n            data: result.data\n          });\n\n        case 6:\n          _context.next = 11;\n          break;\n\n        case 8:\n          _context.prev = 8;\n          _context.t0 = _context[\"catch\"](0);\n          console.log(_context.t0);\n\n        case 11:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, _marked, null, [[0, 8]]);\n}\n\nfunction watchAddPost() {\n  return _regeneratorRuntime.wrap(function watchAddPost$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return takeLatest(ADD_POST_REQUEST, addPost);\n\n        case 2:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, _marked2);\n}\n\nexport default function postSaga() {\n  return _regeneratorRuntime.wrap(function postSaga$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return all([fork(watchAddPost)]);\n\n        case 2:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, _marked3);\n}","map":{"version":3,"sources":["C:/Users/rlarb/Documents/nodebird/front/sagas/post.jsx"],"names":["addPost","watchAddPost","postSaga","all","call","put","takeLatest","ADD_POST_REQUEST","action","addPostApi","data","result","type","ADD_POST_SUCCESS","console","log","fork"],"mappings":";;oDAIUA,O;qDAaAC,Y;qDAKeC,Q;;AAtBzB,SAASC,GAAT,EAAcC,IAAd,EAAoBC,GAApB,EAAyBC,UAAzB,QAA2C,oBAA3C;AACA,SAASC,gBAAT,QAAiC,kBAAjC;;AAGA,SAAUP,OAAV,CAAkBQ,MAAlB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEuB,iBAAMJ,IAAI,CAACK,UAAD,EAAYD,MAAM,CAACE,IAAnB,CAAV;;AAFvB;AAEcC,UAAAA,MAFd;AAAA;AAGQ,iBAAMN,GAAG,CAAC;AACNO,YAAAA,IAAI,EAACC,gBADC;AAENH,YAAAA,IAAI,EAACC,MAAM,CAACD;AAFN,WAAD,CAAT;;AAHR;AAAA;AAAA;;AAAA;AAAA;AAAA;AAQQI,UAAAA,OAAO,CAACC,GAAR;;AARR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAaA,SAAUd,YAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACI,iBAAMK,UAAU,CAACC,gBAAD,EAAkBP,OAAlB,CAAhB;;AADJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKA,eAAe,SAAUE,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AACX,iBAAMC,GAAG,CAAC,CACNa,IAAI,CAACf,YAAD,CADE,CAAD,CAAT;;AADW;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import { all, call, put, takeLatest } from \"redux-saga/effects\";\r\nimport { ADD_POST_REQUEST } from \"../reducers/post\";\r\n\r\n\r\nfunction* addPost(action){\r\n    try{\r\n        const result = yield call(addPostApi,action.data);\r\n        yield put({\r\n            type:ADD_POST_SUCCESS,\r\n            data:result.data,\r\n        });\r\n    }catch(error){\r\n        console.log(error);\r\n    }\r\n}\r\n\r\n\r\nfunction* watchAddPost(){\r\n    yield takeLatest(ADD_POST_REQUEST,addPost);\r\n}\r\n\r\n\r\nexport default function* postSaga(){\r\n    yield all([\r\n        fork(watchAddPost)\r\n    ])\r\n}"]},"metadata":{},"sourceType":"module"}